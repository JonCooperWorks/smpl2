
// test a line comment
1 + // 2
3 ;

1 + /* 2 */ 2 ;

// integers
//print("Testing integers\n");
10 ;
#b101 ;
#x10ff ;
//print("Integers passed\n");

// identifiers
//print("testing identifiers\n");
def x 1;
def x1 1 ;
def x1y 1;
def 1xy 1;
def 11xy 1;
//print("Identifiers tests passed\n");

// strings
//print("testing strings\n");
/*"foo" ;
"def" ;
"hello world" ; */
//print("string tests passed\n");

// arithExps
1 + 2 * 3 ;
1 + 2 + 3 ;
1 + 2 > 2 + 3 ;

// def tests
def x 1 ;
/*print("x = ");*/ println(x) ; //print("\n");

def x 1 + 2 * 3 ;
/*print("x = ");*/ println(x);zz //print("\n");

//def s "foo" ;
//print("s = "); println(s); //print("\n");

// proc tests
//print("proc tests\n");zz
proc(x) x + 1 ;
proc(x) proc(n) x + n ;
println(proc(x) x(x)) ; //print("\n");
//print("proc tests passed\n");

// call tests
//println ("call tests\n");
println((proc(n) n + 1)(2)) ; //print("\n");
println((proc(f,x) (proc(m) f(f(m)))(x))(proc(n) n * n, 3)) ; //print("\n");

// let tests
//print("let tests\n");
println(let(x be 1) x + 1) ; //print("\n");
def a 0;
println(let(f be proc(n) n * n)
	let (a be f(5))
	   a) ;
//print("\n");
def a 3; def b 7;   def f proc(n) n + 1;
let(b be 5,
    f be (proc(n) a * n),
    a be f(b)) {
 // print("a + b = ");
  println(a + b);
  //print("\n");
  };

def f proc(n) n + 1 ;
// should print 5 not 4
println(
	let(f be proc(n) if n < 1 then 1 else 1 + f(n - 2))
	  f(5)
) ;
//print("\n");

//print("let tests passed\n");

// def within proc
/*def a 5;
def f proc(n) {
    def a 3;
    def g proc(x) {
	//print("x + a * n = ");
	println(x + a * n);  //print("\t");
	}
    g(1);
}
/*print("f(2) = ");*/ println(f(2));  //print("\n");
/*print("a = ");*/ println(a);   //print("\n"); */

// if tests
//print("if tests\n");
print(if #t then 1 else 0) ;  //print("\n");
print(if #f then 1 else 0) ;  //print("\n");
print(if 1 < 2 then 1 else 0); //print("\n");
//print("if tests passed\n");

// assignment tests
//print("assignment tests\n");
def x 1 ;  x ;  x := 3 ;  x ;
/*print("x = ");*/ println(x);  //print("\n");
def f proc(n) proc(x) n + x ;
def g f(2);
println(g(3)) ;  //print("\n");
f := f(2) ;
println(f(3)) ;  //print("\n");
//print("assignment tests passed\n");

// vectors
//print("Vector tests"); print("\n");
println([: 1 , 2 , 3 :]) ; //print("\n");
println([: 1 + 2 , 2 + 3 , 3 + 5 :]) ; //print("\n");
println([: 1 + 2 , 3 * 4 , 12 - 7 :]) ; //print("\n");
println([: 5 : proc(n) (2 * n) :]) ; //print("\n");
println([: 3 : proc(n) n , 4 : proc(n) n * n :]) ; //print("\n");
println([: 1 , 3 : proc(n) n + 2 , 5 , 6 , 7 :]) ; //print("\n");
//print("Vector tests passed"); //print("\n");

// characters
/*print("char a = ");*/ println(#\a); /*print("\n");
print("char nl = ");*/ println(#\nl); //print("\n");
/*print("char tab = ");*/ println(#\tb);// print("\n");

// nestable comments
println( 1 /*
	   + 1 + /* 1 + 2 */
	   + 4 */
	   + 1); //print("\n");

// case statement
/*def x 3;
def f proc(x)
  case {
     x < 0: println (x +2)
     x = 0: println (x)
     else: println (x - 1)
  };

print(f(-1)); */

// functions are values
/*def map proc(f, list)
/* return a new list, obtained
   by applying f to each element
   of list */

if list = #e then #e else pair(f(1st(list)), map(f, 2nd(list)));*/


def iter proc(f, m, n)
  if  m > n
  then 0
  else f(m) + iter(f, m + 1, n);        
  
def fact proc(n)
// return factorial n
if n <= 1
then 1
else n * fact(n - 1);


