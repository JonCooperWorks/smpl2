/* Specification for SMPL tokens */

// user customisations
package lang;
import java_cup.runtime.*;
import java.io.IOException;


// Jlex directives
    
%%

%cup
%public

%states YYSTRING

%class SMPLLexer

%type java_cup.runtime.Symbol

%eofval{
	return new Symbol(sym.EOF);
%eofval}

%char
%line

%{
    public int getChar() {
	return yychar + 1;
    }

    public int getLine() {
	return yyline + 1;
    }

    public String getText() {
	return yytext();
    }
%}

nl = \n

cc = \b\f{nl}

ws = \t" "\r\n

hxdigit = [0-9a-fA-F]

alpha = [a-zA-Z]

num = [0-9]

alphanum = {alpha}|{num}

specialchars = [#+-*.!]

allchars={alphanum}|{specialchars}

identifier = {alphanum}+{allchars}+

%%

<YYINITIAL>	\n[\t|" "|\n]*          { yychar = 0; }
<YYINITIAL>	[\t|" "|\n]*\n          { yychar = 0; }

<YYINITIAL>     "//".*                  { /* Comments */ }

<YYINITIAL>     "/*"[^"*/"]*"*/"        { /* Comments */ }

<YYINITIAL>	{ws}+"+"{ws}+
					{ return new Symbol(sym.PLUS); }
<YYINITIAL>	{ws}+"-"{ws}+
					{ return new Symbol(sym.MINUS); }
<YYINITIAL>	{ws}+"*"{ws}+
					{ return new Symbol(sym.MUL); }
<YYINITIAL>	{ws}+"/"{ws}+		
					{ return new Symbol(sym.DIV); }
<YYINITIAL>	{ws}+"%"{ws}+		
					{ return new Symbol(sym.MOD); }

<YYINITIAL>	{ws}+":="{ws}+	{ return new Symbol(sym.ASSIGN); }

<YYINITIAL>	{ws}+"&"{ws}+		
					{ return new Symbol(sym.BAND); }
<YYINITIAL>	{ws}+"|"{ws}+		
					{ return new Symbol(sym.BOR); }
<YYINITIAL>	"~"{ws}+		
					{ return new Symbol(sym.BNOT); }

<YYINITIAL>	{ws}+"!="{ws}+
					{ return new Symbol(sym.NEQUAL); }
<YYINITIAL>	{ws}+">="{ws}+		
					{ return new Symbol(sym.GEQUAL); }
<YYINITIAL>	{ws}+"<="{ws}+		
					{ return new Symbol(sym.LEQUAL); }
<YYINITIAL>	{ws}+">"{ws}+		
					{ return new Symbol(sym.GTHAN); }
<YYINITIAL>	{ws}+"<"{ws}+		
					{ return new Symbol(sym.LTHAN); }
<YYINITIAL>	{ws}+"="{ws}+		
					{ return new Symbol(sym.EQUAL); }

<YYINITIAL>	{ws}+"and"{ws}+		
					{ return new Symbol(sym.LAND); }
<YYINITIAL>	{ws}+"or"{ws}+		
					{ return new Symbol(sym.LOR); }
<YYINITIAL>	"not"{ws}+		
					{ return new Symbol(sym.LNOT); }

<YYINITIAL>	{ws}+"@"{ws}+
					{ return new Symbol(sym.CONCAT); }

<YYINITIAL>     {ws}                    { /* Ignore whitespace */ }

<YYINITIAL>	"#t"                      { return new Symbol(sym.TRUE); }
<YYINITIAL>	"#f"                      { return new Symbol(sym.FALSE); }
			
<YYINITIAL>	";"                     { return new Symbol(sym.SEMI); }
<YYINITIAL>	","                     { return new Symbol(sym.COMMA); }
<YYINITIAL>	"("                     { return new Symbol(sym.LPAREN); }
<YYINITIAL>	")"                     { return new Symbol(sym.RPAREN); }
<YYINITIAL>	"{"                     { return new Symbol(sym.LBRACE); }
<YYINITIAL>	"}"                     { return new Symbol(sym.RBRACE); }
<YYINITIAL>	"[:"                    { return new Symbol(sym.VECLEFT); }
<YYINITIAL>	":]"                    { return new Symbol(sym.VECRIGHT); }
<YYINITIAL>	"["                     { return new Symbol(sym.LBRACKET); }
<YYINITIAL>	"]"                     { return new Symbol(sym.RBRACKET); }
<YYINITIAL>	"#e"                     { return new Symbol(sym.NIL); }
<YYINITIAL>	":"                       { return new Symbol(sym.COLON); }

<YYINITIAL>	"proc"                    { return new Symbol(sym.PROC); }
<YYINITIAL>	"call"                    { return new Symbol(sym.CALL); }
<YYINITIAL>	"let"                   { return new Symbol(sym.LET); }
<YYINITIAL>	"def"                     { return new Symbol(sym.DEF); }
<YYINITIAL>	"if"                      { return new Symbol(sym.IF); }
<YYINITIAL>	"then"                    { return new Symbol(sym.THEN); }
<YYINITIAL>	"else"                    { return new Symbol(sym.ELSE); }
<YYINITIAL>	"case"                   { return new Symbol(sym.CASE); }
<YYINITIAL>	"print"                   { return new Symbol(sym.PRINT); }
<YYINITIAL>	"println"                 { return new Symbol(sym.PRINTLN); }
<YYINITIAL>	"read"                   { return new Symbol(sym.READ); }
<YYINITIAL>	"readint"                 { return new Symbol(sym.READINT); }
<YYINITIAL>	"lazy"                    { return new Symbol(sym.LAZY); }

<YYINITIAL>	"pair"                   { return new Symbol(sym.PAIR); }
<YYINITIAL>	"car"                     { return new Symbol(sym.CAR); }
<YYINITIAL>	"cdr"                     { return new Symbol(sym.CDR); }
<YYINITIAL>	"pair?"                 { return new Symbol(sym.PAIRQ); }
<YYINITIAL>	"list"                    { return new Symbol(sym.LIST); }

<YYINITIAL>	"size"                    { return new Symbol(sym.SIZE); }

<YYINITIAL>	"eqv?"                  { return new Symbol(sym.EQVQ); }
<YYINITIAL>	"equal?"                { return new Symbol(sym.EQUALQ); }

<YYINITIAL>	"substr"                  { return new Symbol(sym.SUBSTR); }

<YYINITIAL>	"be"                      { return new Symbol(sym.BE); }


<YYINITIAL> \"(.+|"\t"|"\n"|"\f"|\\\\)\" {
                    return new Symbol(sym.STRING, yytext().substring(1, yylength() - 1));
                }


<YYINITIAL>        \'(.|"\t"|"\n"|\\\\|"\f"|"\'")\'        {
                    return new Symbol(sym.CHAR, yytext().substring(1, yylength() - 1));
                 }


<YYINITIAL>     "-"?[0-9]*"."[0-9]+|"-"?[0-9]+"."[0-9]*     { return new Symbol( sym.DOUBLE, new Double(yytext().substring(0, yylength()-1))); }


<YYINITIAL>  {identifier} { return new Symbol( sym.VARIABLE, yytext() ); }

