
//----------------------------------------------------
// The following code was generated by CUP v0.10j
// Fri Dec 28 19:31:07 GMT-05:00 2012
//----------------------------------------------------

package lang;

import ast.ASTCdrExp;
import ast.ASTIdExp;
import ast.ASTEqualExp;
import ast.ASTNmGrtrExp;
import ast.ASTCaseStmtExp;
import ast.ASTNmModExp;
import ast.ASTNmSubExp;
import ast.ASTCaseExp;
import ast.ASTSizeExp;
import ast.ASTFunCallExp;
import ast.ASTNmLEqlExp;
import ast.ASTPairQExp;
import ast.ASTSequence;
import ast.ASTMulAssignExp;
import ast.ASTBooleanExp;
import ast.ASTBoAndExp;
import ast.ASTBoOrExp;
import ast.ASTNmLessExp;
import ast.ASTNmNotEqlExp;
import ast.ASTIfExp;
import ast.ASTAssignExp;
import ast.SMPLProgram;
import ast.ASTSubstrExp;
import ast.ASTPairExp;
import ast.ASTIntExp;
import ast.ASTEqvExp;
import ast.ASTNmDivExp;
import ast.ASTBitOrExp;
import ast.ASTFunDefExp;
import ast.ASTListConcatExp;
import ast.ASTFloatExp;
import ast.ASTNmGEqlExp;
import ast.ASTPrintExp;
import ast.ASTStringExp;
import ast.ASTLazyExp;
import ast.ASTNode;
import ast.ASTReadIntExp;
import ast.ASTCarExp;
import ast.ASTBoNotExp;
import ast.ASTReadExp;
import ast.ASTNmEqlExp;
import ast.ASTNmMulExp;
import ast.ASTVecExp;
import ast.ASTNmAddExp;
import ast.ASTBitAndExp;
import ast.ASTVectorListExp;
import ast.ASTDefine;
import ast.ASTListExp;
import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import lang.SMPLLexer;

/** CUP v0.10j generated parser.
  * @version Fri Dec 28 19:31:07 GMT-05:00 2012
  */
public class SMPLParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SMPLParser() {super();}

  /** Constructor which sets the default scanner. */
  public SMPLParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\146\000\002\003\003\000\002\002\004\000\002\005" +
    "\004\000\002\005\003\000\002\004\004\000\002\004\004" +
    "\000\002\004\004\000\002\004\004\000\002\004\003\000" +
    "\002\006\005\000\002\006\005\000\002\006\003\000\002" +
    "\011\005\000\002\011\003\000\002\012\004\000\002\012" +
    "\003\000\002\014\005\000\002\014\005\000\002\014\005" +
    "\000\002\014\005\000\002\014\005\000\002\014\005\000" +
    "\002\014\003\000\002\015\005\000\002\015\005\000\002" +
    "\015\003\000\002\016\005\000\002\016\005\000\002\016" +
    "\005\000\002\016\003\000\002\007\005\000\002\007\005" +
    "\000\002\007\005\000\002\007\003\000\002\013\004\000" +
    "\002\013\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\004\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\006\000\002\010\006\000\002\010\006\000\002\010" +
    "\006\000\002\010\006\000\002\010\005\000\002\010\010" +
    "\000\002\010\010\000\002\010\012\000\002\010\005\000" +
    "\002\010\003\000\002\010\003\000\002\010\006\000\002" +
    "\010\010\000\002\010\005\000\002\025\007\000\002\037" +
    "\005\000\002\037\003\000\002\037\003\000\002\040\003" +
    "\000\002\023\010\000\002\023\010\000\002\026\003\000" +
    "\002\026\003\000\002\027\005\000\002\027\003\000\002" +
    "\017\003\000\002\017\005\000\002\030\005\000\002\030" +
    "\003\000\002\022\006\000\002\022\010\000\002\042\006" +
    "\000\002\043\006\000\002\044\006\000\002\045\006\000" +
    "\002\046\010\000\002\020\005\000\002\021\005\000\002" +
    "\033\005\000\002\031\005\000\002\032\005\000\002\032" +
    "\003\000\002\034\006\000\002\035\005\000\002\035\003" +
    "\000\002\036\005\000\002\047\005\000\002\050\005\000" +
    "\002\050\003\000\002\051\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\343\000\110\004\022\010\056\012\075\014\006\020" +
    "\047\021\074\032\034\043\046\045\067\046\072\047\031" +
    "\050\064\051\042\054\017\055\076\056\024\057\061\060" +
    "\011\061\030\062\054\063\016\064\021\065\057\066\062" +
    "\067\050\070\005\071\012\072\063\073\020\074\025\075" +
    "\055\076\023\077\010\100\070\101\060\001\002\000\004" +
    "\002\345\001\002\000\004\004\340\001\002\000\104\004" +
    "\022\010\056\012\075\014\006\020\047\021\074\032\034" +
    "\043\046\045\067\047\031\050\064\051\042\055\076\056" +
    "\024\057\061\060\011\061\030\062\054\063\016\064\021" +
    "\065\057\066\062\067\050\070\005\071\012\072\063\073" +
    "\020\074\025\075\055\076\023\077\010\100\070\101\102" +
    "\001\002\000\112\002\001\004\022\010\056\012\075\014" +
    "\006\020\047\021\074\032\034\043\046\045\067\046\072" +
    "\047\031\050\064\051\042\054\017\055\076\056\024\057" +
    "\061\060\011\061\030\062\054\063\016\064\021\065\057" +
    "\066\062\067\050\070\005\071\012\072\063\073\020\074" +
    "\025\075\055\076\023\077\010\100\070\101\060\001\002" +
    "\000\064\005\uffda\006\uffda\007\uffda\011\uffda\013\uffda\015" +
    "\uffda\016\uffda\022\uffda\023\uffda\024\uffda\025\uffda\026\uffda" +
    "\030\uffda\031\uffda\033\uffda\034\uffda\035\uffda\036\uffda\037" +
    "\uffda\040\uffda\041\uffda\042\uffda\044\uffda\052\uffda\053\uffda" +
    "\001\002\000\004\004\333\001\002\000\004\004\326\001" +
    "\002\000\064\005\uffc4\006\uffc4\007\uffc4\011\uffc4\013\uffc4" +
    "\015\uffc4\016\uffc4\022\uffc4\023\uffc4\024\uffc4\025\uffc4\026" +
    "\uffc4\030\uffc4\031\uffc4\033\uffc4\034\uffc4\035\uffc4\036\uffc4" +
    "\037\uffc4\040\uffc4\041\uffc4\042\uffc4\044\uffc4\052\uffc4\053" +
    "\uffc4\001\002\000\064\005\uffcf\006\uffcf\007\uffcf\011\uffcf" +
    "\013\uffcf\015\uffcf\016\uffcf\022\uffcf\023\uffcf\024\uffcf\025" +
    "\uffcf\026\uffcf\030\uffcf\031\uffcf\033\uffcf\034\uffcf\035\uffcf" +
    "\036\uffcf\037\uffcf\040\uffcf\041\uffcf\042\uffcf\044\uffcf\052" +
    "\uffcf\053\uffcf\001\002\000\004\006\325\001\002\000\004" +
    "\004\322\001\002\000\004\010\311\001\002\000\064\005" +
    "\uffdc\006\uffdc\007\uffdc\011\uffdc\013\uffdc\015\uffdc\016\uffdc" +
    "\022\uffdc\023\uffdc\024\uffdc\025\uffdc\026\uffdc\030\uffdc\031" +
    "\uffdc\033\uffdc\034\uffdc\035\uffdc\036\uffdc\037\uffdc\040\uffdc" +
    "\041\uffdc\042\uffdc\044\uffdc\052\uffdc\053\uffdc\001\002\000" +
    "\004\004\306\001\002\000\104\004\022\010\056\012\075" +
    "\014\006\020\047\021\074\032\034\043\046\045\067\047" +
    "\031\050\064\051\042\055\076\056\024\057\061\060\011" +
    "\061\030\062\054\063\016\064\021\065\057\066\062\067" +
    "\050\070\005\071\012\072\063\073\020\074\025\075\055" +
    "\076\023\077\010\100\070\101\102\001\002\000\064\005" +
    "\uffd7\006\uffd7\007\uffd7\011\uffd7\013\uffd7\015\uffd7\016\uffd7" +
    "\022\uffd7\023\uffd7\024\uffd7\025\uffd7\026\uffd7\030\uffd7\031" +
    "\uffd7\033\uffd7\034\uffd7\035\uffd7\036\uffd7\037\uffd7\040\uffd7" +
    "\041\uffd7\042\uffd7\044\uffd7\052\uffd7\053\uffd7\001\002\000" +
    "\004\004\276\001\002\000\064\005\uffd9\006\uffd9\007\uffd9" +
    "\011\uffd9\013\uffd9\015\uffd9\016\uffd9\022\uffd9\023\uffd9\024" +
    "\uffd9\025\uffd9\026\uffd9\030\uffd9\031\uffd9\033\uffd9\034\uffd9" +
    "\035\uffd9\036\uffd9\037\uffd9\040\uffd9\041\uffd9\042\uffd9\044" +
    "\uffd9\052\uffd9\053\uffd9\001\002\000\064\005\uffe0\006\uffe0" +
    "\007\uffe0\011\uffe0\013\uffe0\015\uffe0\016\uffe0\022\uffe0\023" +
    "\uffe0\024\uffe0\025\uffe0\026\uffe0\030\uffe0\031\uffe0\033\uffe0" +
    "\034\uffe0\035\uffe0\036\uffe0\037\uffe0\040\uffe0\041\uffe0\042" +
    "\uffe0\044\uffe0\052\uffe0\053\uffe0\001\002\000\064\005\uffd1" +
    "\006\uffd1\007\uffd1\011\uffd1\013\uffd1\015\uffd1\016\uffd1\022" +
    "\uffd1\023\uffd1\024\uffd1\025\uffd1\026\uffd1\030\uffd1\031\uffd1" +
    "\033\uffd1\034\uffd1\035\uffd1\036\uffd1\037\uffd1\040\uffd1\041" +
    "\uffd1\042\uffd1\044\uffd1\052\uffd1\053\uffd1\001\002\000\004" +
    "\004\273\001\002\000\004\004\266\001\002\000\004\006" +
    "\265\001\002\000\056\005\uffe8\006\uffe8\007\uffe8\011\uffe8" +
    "\013\uffe8\015\uffe8\016\uffe8\022\242\023\244\030\uffe8\031" +
    "\uffe8\033\uffe8\034\uffe8\035\uffe8\036\uffe8\037\uffe8\040\uffe8" +
    "\041\uffe8\042\uffe8\044\243\052\uffe8\053\uffe8\001\002\000" +
    "\100\004\022\012\075\014\006\020\047\021\074\032\034" +
    "\045\067\047\031\050\064\051\042\055\076\056\024\057" +
    "\061\060\011\061\030\062\054\063\016\064\021\065\057" +
    "\066\062\067\050\070\005\071\012\072\063\073\020\074" +
    "\025\075\055\076\023\077\010\100\070\101\102\001\002" +
    "\000\064\005\uffc3\006\uffc3\007\uffc3\011\uffc3\013\uffc3\015" +
    "\uffc3\016\uffc3\022\uffc3\023\uffc3\024\uffc3\025\uffc3\026\uffc3" +
    "\030\uffc3\031\uffc3\033\uffc3\034\uffc3\035\uffc3\036\uffc3\037" +
    "\uffc3\040\uffc3\041\uffc3\042\uffc3\044\uffc3\052\uffc3\053\uffc3" +
    "\001\002\000\050\005\uffeb\006\uffeb\007\uffeb\011\uffeb\013" +
    "\uffeb\015\uffeb\016\uffeb\030\237\031\240\033\uffeb\034\uffeb" +
    "\035\uffeb\036\uffeb\037\uffeb\040\uffeb\041\uffeb\042\uffeb\052" +
    "\uffeb\053\uffeb\001\002\000\044\005\ufff2\006\ufff2\007\ufff2" +
    "\011\ufff2\013\ufff2\015\ufff2\016\ufff2\033\234\034\230\035" +
    "\235\036\232\037\231\040\233\041\ufff2\042\ufff2\052\ufff2" +
    "\053\ufff2\001\002\000\030\005\ufff4\006\ufff4\007\ufff4\011" +
    "\ufff4\013\ufff4\015\ufff4\016\ufff4\041\ufff4\042\ufff4\052\ufff4" +
    "\053\ufff4\001\002\000\030\005\ufff6\006\ufff6\007\ufff6\011" +
    "\ufff6\013\ufff6\015\ufff6\016\ufff6\041\106\042\ufff6\052\ufff6" +
    "\053\ufff6\001\002\000\104\004\022\010\056\012\075\014" +
    "\006\020\047\021\074\032\034\043\046\045\067\047\031" +
    "\050\064\051\042\055\076\056\024\057\061\060\011\061" +
    "\030\062\054\063\016\064\021\065\057\066\062\067\050" +
    "\070\005\071\012\072\063\073\020\074\025\075\055\076" +
    "\023\077\010\100\070\101\102\001\002\000\064\005\uffd0" +
    "\006\uffd0\007\uffd0\011\uffd0\013\uffd0\015\uffd0\016\uffd0\022" +
    "\uffd0\023\uffd0\024\uffd0\025\uffd0\026\uffd0\030\uffd0\031\uffd0" +
    "\033\uffd0\034\uffd0\035\uffd0\036\uffd0\037\uffd0\040\uffd0\041" +
    "\uffd0\042\uffd0\044\uffd0\052\uffd0\053\uffd0\001\002\000\064" +
    "\005\uffd2\006\uffd2\007\uffd2\011\uffd2\013\uffd2\015\uffd2\016" +
    "\uffd2\022\uffd2\023\uffd2\024\uffd2\025\uffd2\026\uffd2\030\uffd2" +
    "\031\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2\037\uffd2\040" +
    "\uffd2\041\uffd2\042\uffd2\044\uffd2\052\uffd2\053\uffd2\001\002" +
    "\000\006\006\256\042\103\001\002\000\100\004\022\012" +
    "\075\014\006\020\047\021\074\032\034\045\067\047\031" +
    "\050\064\051\042\055\076\056\024\057\061\060\011\061" +
    "\030\062\054\063\016\064\021\065\057\066\062\067\050" +
    "\070\005\071\012\072\063\073\020\074\025\075\055\076" +
    "\023\077\010\100\070\101\102\001\002\000\064\005\uffd6" +
    "\006\uffd6\007\uffd6\011\uffd6\013\uffd6\015\uffd6\016\uffd6\022" +
    "\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6\030\uffd6\031\uffd6" +
    "\033\uffd6\034\uffd6\035\uffd6\036\uffd6\037\uffd6\040\uffd6\041" +
    "\uffd6\042\uffd6\044\uffd6\052\uffd6\053\uffd6\001\002\000\004" +
    "\004\224\001\002\000\004\027\222\001\002\000\174\002" +
    "\ufff9\004\ufff9\005\ufff9\006\ufff9\007\ufff9\010\ufff9\011\ufff9" +
    "\012\ufff9\013\ufff9\014\ufff9\015\ufff9\016\ufff9\020\ufff9\021" +
    "\ufff9\022\ufff9\023\ufff9\024\ufff9\025\ufff9\026\ufff9\030\ufff9" +
    "\031\ufff9\032\ufff9\033\ufff9\034\ufff9\035\ufff9\036\ufff9\037" +
    "\ufff9\040\ufff9\041\ufff9\042\ufff9\043\ufff9\044\ufff9\045\ufff9" +
    "\046\ufff9\047\ufff9\050\ufff9\051\ufff9\052\ufff9\053\ufff9\054" +
    "\ufff9\055\ufff9\056\ufff9\057\ufff9\060\ufff9\061\ufff9\062\ufff9" +
    "\063\ufff9\064\ufff9\065\ufff9\066\ufff9\067\ufff9\070\ufff9\071" +
    "\ufff9\072\ufff9\073\ufff9\074\ufff9\075\ufff9\076\ufff9\077\ufff9" +
    "\100\ufff9\101\ufff9\001\002\000\064\005\uffe4\006\uffe4\007" +
    "\uffe4\011\uffe4\013\uffe4\015\uffe4\016\uffe4\022\uffe4\023\uffe4" +
    "\024\215\025\216\026\214\030\uffe4\031\uffe4\033\uffe4\034" +
    "\uffe4\035\uffe4\036\uffe4\037\uffe4\040\uffe4\041\uffe4\042\uffe4" +
    "\044\uffe4\052\uffe4\053\uffe4\001\002\000\004\004\207\001" +
    "\002\000\064\005\uffd8\006\uffd8\007\uffd8\011\uffd8\013\uffd8" +
    "\015\uffd8\016\uffd8\022\uffd8\023\uffd8\024\uffd8\025\uffd8\026" +
    "\uffd8\030\uffd8\031\uffd8\033\uffd8\034\uffd8\035\uffd8\036\uffd8" +
    "\037\uffd8\040\uffd8\041\uffd8\042\uffd8\044\uffd8\052\uffd8\053" +
    "\uffd8\001\002\000\110\004\022\010\056\012\075\014\006" +
    "\020\047\021\074\032\034\043\046\045\067\046\072\047" +
    "\031\050\064\051\042\054\017\055\076\056\024\057\061" +
    "\060\011\061\030\062\054\063\016\064\021\065\057\066" +
    "\062\067\050\070\005\071\012\072\063\073\020\074\025" +
    "\075\055\076\023\077\010\100\070\101\060\001\002\000" +
    "\004\004\202\001\002\000\050\006\uffdd\007\173\022\uffdd" +
    "\023\uffdd\024\uffdd\025\uffdd\026\uffdd\027\174\030\uffdd\031" +
    "\uffdd\033\uffdd\034\uffdd\035\uffdd\036\uffdd\037\uffdd\040\uffdd" +
    "\041\uffdd\042\uffdd\044\uffdd\001\002\000\004\004\170\001" +
    "\002\000\004\004\160\001\002\000\004\004\151\001\002" +
    "\000\004\004\136\001\002\000\064\005\uffd3\006\uffd3\007" +
    "\uffd3\011\uffd3\013\uffd3\015\uffd3\016\uffd3\022\uffd3\023\uffd3" +
    "\024\uffd3\025\uffd3\026\uffd3\030\uffd3\031\uffd3\033\uffd3\034" +
    "\uffd3\035\uffd3\036\uffd3\037\uffd3\040\uffd3\041\uffd3\042\uffd3" +
    "\044\uffd3\052\uffd3\053\uffd3\001\002\000\004\006\135\001" +
    "\002\000\004\004\123\001\002\000\064\005\uffdb\006\uffdb" +
    "\007\uffdb\011\uffdb\013\uffdb\015\uffdb\016\uffdb\022\uffdb\023" +
    "\uffdb\024\uffdb\025\uffdb\026\uffdb\030\uffdb\031\uffdb\033\uffdb" +
    "\034\uffdb\035\uffdb\036\uffdb\037\uffdb\040\uffdb\041\uffdb\042" +
    "\uffdb\044\uffdb\052\uffdb\053\uffdb\001\002\000\004\006\122" +
    "\001\002\000\004\101\120\001\002\000\064\005\uffde\006" +
    "\uffde\007\uffde\011\uffde\013\uffde\015\uffde\016\uffde\022\uffde" +
    "\023\uffde\024\uffde\025\uffde\026\uffde\030\uffde\031\uffde\033" +
    "\uffde\034\uffde\035\uffde\036\uffde\037\uffde\040\uffde\041\uffde" +
    "\042\uffde\044\uffde\052\uffde\053\uffde\001\002\000\064\005" +
    "\uffd5\006\uffd5\007\uffd5\011\uffd5\013\uffd5\015\uffd5\016\uffd5" +
    "\022\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5\030\uffd5\031" +
    "\uffd5\033\uffd5\034\uffd5\035\uffd5\036\uffd5\037\uffd5\040\uffd5" +
    "\041\uffd5\042\uffd5\044\uffd5\052\uffd5\053\uffd5\001\002\000" +
    "\104\004\022\010\056\012\075\014\006\020\047\021\074" +
    "\032\034\043\046\045\067\047\031\050\064\051\042\055" +
    "\076\056\024\057\061\060\011\061\030\062\054\063\016" +
    "\064\021\065\057\066\062\067\050\070\005\071\012\072" +
    "\063\073\020\074\025\075\055\076\023\077\010\100\070" +
    "\101\102\001\002\000\004\004\100\001\002\000\174\002" +
    "\ufffe\004\ufffe\005\ufffe\006\ufffe\007\ufffe\010\ufffe\011\ufffe" +
    "\012\ufffe\013\ufffe\014\ufffe\015\ufffe\016\ufffe\020\ufffe\021" +
    "\ufffe\022\ufffe\023\ufffe\024\ufffe\025\ufffe\026\ufffe\030\ufffe" +
    "\031\ufffe\032\ufffe\033\ufffe\034\ufffe\035\ufffe\036\ufffe\037" +
    "\ufffe\040\ufffe\041\ufffe\042\ufffe\043\ufffe\044\ufffe\045\ufffe" +
    "\046\ufffe\047\ufffe\050\ufffe\051\ufffe\052\ufffe\053\ufffe\054" +
    "\ufffe\055\ufffe\056\ufffe\057\ufffe\060\ufffe\061\ufffe\062\ufffe" +
    "\063\ufffe\064\ufffe\065\ufffe\066\ufffe\067\ufffe\070\ufffe\071" +
    "\ufffe\072\ufffe\073\ufffe\074\ufffe\075\ufffe\076\ufffe\077\ufffe" +
    "\100\ufffe\101\ufffe\001\002\000\104\004\022\010\056\012" +
    "\075\014\006\020\047\021\074\032\034\043\046\045\067" +
    "\047\031\050\064\051\042\055\076\056\024\057\061\060" +
    "\011\061\030\062\054\063\016\064\021\065\057\066\062" +
    "\067\050\070\005\071\012\072\063\073\020\074\025\075" +
    "\055\076\023\077\010\100\070\101\102\001\002\000\006" +
    "\005\104\042\103\001\002\000\064\005\uffdd\006\uffdd\007" +
    "\uffdd\011\uffdd\013\uffdd\015\uffdd\016\uffdd\022\uffdd\023\uffdd" +
    "\024\uffdd\025\uffdd\026\uffdd\030\uffdd\031\uffdd\033\uffdd\034" +
    "\uffdd\035\uffdd\036\uffdd\037\uffdd\040\uffdd\041\uffdd\042\uffdd" +
    "\044\uffdd\052\uffdd\053\uffdd\001\002\000\102\004\022\012" +
    "\075\014\006\020\047\021\074\032\034\043\046\045\067" +
    "\047\031\050\064\051\042\055\076\056\024\057\061\060" +
    "\011\061\030\062\054\063\016\064\021\065\057\066\062" +
    "\067\050\070\005\071\012\072\063\073\020\074\025\075" +
    "\055\076\023\077\010\100\070\101\102\001\002\000\064" +
    "\005\uffae\006\uffae\007\uffae\011\uffae\013\uffae\015\uffae\016" +
    "\uffae\022\uffae\023\uffae\024\uffae\025\uffae\026\uffae\030\uffae" +
    "\031\uffae\033\uffae\034\uffae\035\uffae\036\uffae\037\uffae\040" +
    "\uffae\041\uffae\042\uffae\044\uffae\052\uffae\053\uffae\001\002" +
    "\000\030\005\ufff8\006\ufff8\007\ufff8\011\ufff8\013\ufff8\015" +
    "\ufff8\016\ufff8\041\106\042\ufff8\052\ufff8\053\ufff8\001\002" +
    "\000\102\004\022\012\075\014\006\020\047\021\074\032" +
    "\034\043\046\045\067\047\031\050\064\051\042\055\076" +
    "\056\024\057\061\060\011\061\030\062\054\063\016\064" +
    "\021\065\057\066\062\067\050\070\005\071\012\072\063" +
    "\073\020\074\025\075\055\076\023\077\010\100\070\101" +
    "\102\001\002\000\030\005\ufff5\006\ufff5\007\ufff5\011\ufff5" +
    "\013\ufff5\015\ufff5\016\ufff5\041\ufff5\042\ufff5\052\ufff5\053" +
    "\ufff5\001\002\000\006\007\uffb1\013\uffb1\001\002\000\006" +
    "\007\115\013\116\001\002\000\012\007\uffb4\013\uffb4\016" +
    "\113\042\103\001\002\000\104\004\022\010\056\012\075" +
    "\014\006\020\047\021\074\032\034\043\046\045\067\047" +
    "\031\050\064\051\042\055\076\056\024\057\061\060\011" +
    "\061\030\062\054\063\016\064\021\065\057\066\062\067" +
    "\050\070\005\071\012\072\063\073\020\074\025\075\055" +
    "\076\023\077\010\100\070\101\102\001\002\000\010\007" +
    "\uffb3\013\uffb3\042\103\001\002\000\104\004\022\010\056" +
    "\012\075\014\006\020\047\021\074\032\034\043\046\045" +
    "\067\047\031\050\064\051\042\055\076\056\024\057\061" +
    "\060\011\061\030\062\054\063\016\064\021\065\057\066" +
    "\062\067\050\070\005\071\012\072\063\073\020\074\025" +
    "\075\055\076\023\077\010\100\070\101\102\001\002\000" +
    "\064\005\uffc5\006\uffc5\007\uffc5\011\uffc5\013\uffc5\015\uffc5" +
    "\016\uffc5\022\uffc5\023\uffc5\024\uffc5\025\uffc5\026\uffc5\030" +
    "\uffc5\031\uffc5\033\uffc5\034\uffc5\035\uffc5\036\uffc5\037\uffc5" +
    "\040\uffc5\041\uffc5\042\uffc5\044\uffc5\052\uffc5\053\uffc5\001" +
    "\002\000\006\007\uffb2\013\uffb2\001\002\000\104\004\022" +
    "\010\056\012\075\014\006\020\047\021\074\032\034\043" +
    "\046\045\067\047\031\050\064\051\042\055\076\056\024" +
    "\057\061\060\011\061\030\062\054\063\016\064\021\065" +
    "\057\066\062\067\050\070\005\071\012\072\063\073\020" +
    "\074\025\075\055\076\023\077\010\100\070\101\102\001" +
    "\002\000\006\006\uffa9\042\103\001\002\000\064\005\uffd4" +
    "\006\uffd4\007\uffd4\011\uffd4\013\uffd4\015\uffd4\016\uffd4\022" +
    "\uffd4\023\uffd4\024\uffd4\025\uffd4\026\uffd4\030\uffd4\031\uffd4" +
    "\033\uffd4\034\uffd4\035\uffd4\036\uffd4\037\uffd4\040\uffd4\041" +
    "\uffd4\042\uffd4\044\uffd4\052\uffd4\053\uffd4\001\002\000\010" +
    "\005\uff9c\007\uff9c\101\127\001\002\000\006\005\131\007" +
    "\130\001\002\000\006\005\uffbc\007\uffbc\001\002\000\006" +
    "\005\uffbd\007\uffbd\001\002\000\006\005\uffbb\007\uffbb\001" +
    "\002\000\004\101\127\001\002\000\110\004\022\010\056" +
    "\012\075\014\006\020\047\021\074\032\034\043\046\045" +
    "\067\046\072\047\031\050\064\051\042\054\017\055\076" +
    "\056\024\057\061\060\011\061\030\062\054\063\016\064" +
    "\021\065\057\066\062\067\050\070\005\071\012\072\063" +
    "\073\020\074\025\075\055\076\023\077\010\100\070\101" +
    "\060\001\002\000\172\004\022\005\uffbf\006\uffbf\007\uffbf" +
    "\010\056\011\uffbf\012\075\013\uffbf\014\006\015\uffbf\016" +
    "\uffbf\020\047\021\074\022\uffbf\023\uffbf\024\uffbf\025\uffbf" +
    "\026\uffbf\030\uffbf\031\uffbf\032\034\033\uffbf\034\uffbf\035" +
    "\uffbf\036\uffbf\037\uffbf\040\uffbf\041\uffbf\042\uffbf\043\046" +
    "\044\uffbf\045\067\046\072\047\031\050\064\051\042\052" +
    "\uffbf\053\uffbf\054\017\055\076\056\024\057\061\060\011" +
    "\061\030\062\054\063\016\064\021\065\057\066\062\067" +
    "\050\070\005\071\012\072\063\073\020\074\025\075\055" +
    "\076\023\077\010\100\070\101\060\001\002\000\174\002" +
    "\uffff\004\uffff\005\uffff\006\uffff\007\uffff\010\uffff\011\uffff" +
    "\012\uffff\013\uffff\014\uffff\015\uffff\016\uffff\020\uffff\021" +
    "\uffff\022\uffff\023\uffff\024\uffff\025\uffff\026\uffff\030\uffff" +
    "\031\uffff\032\uffff\033\uffff\034\uffff\035\uffff\036\uffff\037" +
    "\uffff\040\uffff\041\uffff\042\uffff\043\uffff\044\uffff\045\uffff" +
    "\046\uffff\047\uffff\050\uffff\051\uffff\052\uffff\053\uffff\054" +
    "\uffff\055\uffff\056\uffff\057\uffff\060\uffff\061\uffff\062\uffff" +
    "\063\uffff\064\uffff\065\uffff\066\uffff\067\uffff\070\uffff\071" +
    "\uffff\072\uffff\073\uffff\074\uffff\075\uffff\076\uffff\077\uffff" +
    "\100\uffff\101\uffff\001\002\000\006\005\uffbe\007\uffbe\001" +
    "\002\000\174\002\ufffa\004\ufffa\005\ufffa\006\ufffa\007\ufffa" +
    "\010\ufffa\011\ufffa\012\ufffa\013\ufffa\014\ufffa\015\ufffa\016" +
    "\ufffa\020\ufffa\021\ufffa\022\ufffa\023\ufffa\024\ufffa\025\ufffa" +
    "\026\ufffa\030\ufffa\031\ufffa\032\ufffa\033\ufffa\034\ufffa\035" +
    "\ufffa\036\ufffa\037\ufffa\040\ufffa\041\ufffa\042\ufffa\043\ufffa" +
    "\044\ufffa\045\ufffa\046\ufffa\047\ufffa\050\ufffa\051\ufffa\052" +
    "\ufffa\053\ufffa\054\ufffa\055\ufffa\056\ufffa\057\ufffa\060\ufffa" +
    "\061\ufffa\062\ufffa\063\ufffa\064\ufffa\065\ufffa\066\ufffa\067" +
    "\ufffa\070\ufffa\071\ufffa\072\ufffa\073\ufffa\074\ufffa\075\ufffa" +
    "\076\ufffa\077\ufffa\100\ufffa\101\ufffa\001\002\000\004\101" +
    "\141\001\002\000\006\005\uff9d\007\uff9d\001\002\000\006" +
    "\005\145\007\144\001\002\000\004\102\142\001\002\000" +
    "\104\004\022\010\056\012\075\014\006\020\047\021\074" +
    "\032\034\043\046\045\067\047\031\050\064\051\042\055" +
    "\076\056\024\057\061\060\011\061\030\062\054\063\016" +
    "\064\021\065\057\066\062\067\050\070\005\071\012\072" +
    "\063\073\020\074\025\075\055\076\023\077\010\100\070" +
    "\101\102\001\002\000\010\005\uff9f\007\uff9f\042\103\001" +
    "\002\000\004\101\141\001\002\000\104\004\022\010\056" +
    "\012\075\014\006\020\047\021\074\032\034\043\046\045" +
    "\067\047\031\050\064\051\042\055\076\056\024\057\061" +
    "\060\011\061\030\062\054\063\016\064\021\065\057\066" +
    "\062\067\050\070\005\071\012\072\063\073\020\074\025" +
    "\075\055\076\023\077\010\100\070\101\102\001\002\000" +
    "\006\006\147\042\103\001\002\000\064\005\uffc1\006\uffc1" +
    "\007\uffc1\011\uffc1\013\uffc1\015\uffc1\016\uffc1\022\uffc1\023" +
    "\uffc1\024\uffc1\025\uffc1\026\uffc1\030\uffc1\031\uffc1\033\uffc1" +
    "\034\uffc1\035\uffc1\036\uffc1\037\uffc1\040\uffc1\041\uffc1\042" +
    "\uffc1\044\uffc1\052\uffc1\053\uffc1\001\002\000\006\005\uff9e" +
    "\007\uff9e\001\002\000\104\004\022\010\056\012\075\014" +
    "\006\020\047\021\074\032\034\043\046\045\067\047\031" +
    "\050\064\051\042\055\076\056\024\057\061\060\011\061" +
    "\030\062\054\063\016\064\021\065\057\066\062\067\050" +
    "\070\005\071\012\072\063\073\020\074\025\075\055\076" +
    "\023\077\010\100\070\101\102\001\002\000\006\007\153" +
    "\042\103\001\002\000\104\004\022\010\056\012\075\014" +
    "\006\020\047\021\074\032\034\043\046\045\067\047\031" +
    "\050\064\051\042\055\076\056\024\057\061\060\011\061" +
    "\030\062\054\063\016\064\021\065\057\066\062\067\050" +
    "\070\005\071\012\072\063\073\020\074\025\075\055\076" +
    "\023\077\010\100\070\101\102\001\002\000\006\007\155" +
    "\042\103\001\002\000\104\004\022\010\056\012\075\014" +
    "\006\020\047\021\074\032\034\043\046\045\067\047\031" +
    "\050\064\051\042\055\076\056\024\057\061\060\011\061" +
    "\030\062\054\063\016\064\021\065\057\066\062\067\050" +
    "\070\005\071\012\072\063\073\020\074\025\075\055\076" +
    "\023\077\010\100\070\101\102\001\002\000\006\005\157" +
    "\042\103\001\002\000\064\005\uffc6\006\uffc6\007\uffc6\011" +
    "\uffc6\013\uffc6\015\uffc6\016\uffc6\022\uffc6\023\uffc6\024\uffc6" +
    "\025\uffc6\026\uffc6\030\uffc6\031\uffc6\033\uffc6\034\uffc6\035" +
    "\uffc6\036\uffc6\037\uffc6\040\uffc6\041\uffc6\042\uffc6\044\uffc6" +
    "\052\uffc6\053\uffc6\001\002\000\106\004\022\005\uff9c\010" +
    "\056\012\075\014\006\020\047\021\074\032\034\043\046" +
    "\045\067\047\031\050\064\051\042\055\076\056\024\057" +
    "\061\060\011\061\030\062\054\063\016\064\021\065\057" +
    "\066\062\067\050\070\005\071\012\072\063\073\020\074" +
    "\025\075\055\076\023\077\010\100\070\101\102\001\002" +
    "\000\004\005\uffb7\001\002\000\006\005\uffb8\007\166\001" +
    "\002\000\012\005\uffb5\007\uffb5\015\uffb5\042\103\001\002" +
    "\000\004\005\165\001\002\000\064\005\uffcb\006\uffcb\007" +
    "\uffcb\011\uffcb\013\uffcb\015\uffcb\016\uffcb\022\uffcb\023\uffcb" +
    "\024\uffcb\025\uffcb\026\uffcb\030\uffcb\031\uffcb\033\uffcb\034" +
    "\uffcb\035\uffcb\036\uffcb\037\uffcb\040\uffcb\041\uffcb\042\uffcb" +
    "\044\uffcb\052\uffcb\053\uffcb\001\002\000\104\004\022\010" +
    "\056\012\075\014\006\020\047\021\074\032\034\043\046" +
    "\045\067\047\031\050\064\051\042\055\076\056\024\057" +
    "\061\060\011\061\030\062\054\063\016\064\021\065\057" +
    "\066\062\067\050\070\005\071\012\072\063\073\020\074" +
    "\025\075\055\076\023\077\010\100\070\101\102\001\002" +
    "\000\012\005\uffb6\007\uffb6\015\uffb6\042\103\001\002\000" +
    "\004\005\uff9c\001\002\000\004\005\172\001\002\000\064" +
    "\005\uffac\006\uffac\007\uffac\011\uffac\013\uffac\015\uffac\016" +
    "\uffac\022\uffac\023\uffac\024\uffac\025\uffac\026\uffac\030\uffac" +
    "\031\uffac\033\uffac\034\uffac\035\uffac\036\uffac\037\uffac\040" +
    "\uffac\041\uffac\042\uffac\044\uffac\052\uffac\053\uffac\001\002" +
    "\000\004\101\177\001\002\000\104\004\022\010\056\012" +
    "\075\014\006\020\047\021\074\032\034\043\046\045\067" +
    "\047\031\050\064\051\042\055\076\056\024\057\061\060" +
    "\011\061\030\062\054\063\016\064\021\065\057\066\062" +
    "\067\050\070\005\071\012\072\063\073\020\074\025\075" +
    "\055\076\023\077\010\100\070\101\102\001\002\000\006" +
    "\006\uffa8\042\103\001\002\000\006\007\200\027\uffa6\001" +
    "\002\000\006\007\uffa4\027\uffa4\001\002\000\004\101\201" +
    "\001\002\000\006\007\uffa5\027\uffa5\001\002\000\104\004" +
    "\022\010\056\012\075\014\006\020\047\021\074\032\034" +
    "\043\046\045\067\047\031\050\064\051\042\055\076\056" +
    "\024\057\061\060\011\061\030\062\054\063\016\064\021" +
    "\065\057\066\062\067\050\070\005\071\012\072\063\073" +
    "\020\074\025\075\055\076\023\077\010\100\070\101\102" +
    "\001\002\000\006\005\204\042\103\001\002\000\064\005" +
    "\uffcc\006\uffcc\007\uffcc\011\uffcc\013\uffcc\015\uffcc\016\uffcc" +
    "\022\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc\030\uffcc\031" +
    "\uffcc\033\uffcc\034\uffcc\035\uffcc\036\uffcc\037\uffcc\040\uffcc" +
    "\041\uffcc\042\uffcc\044\uffcc\052\uffcc\053\uffcc\001\002\000" +
    "\112\004\022\010\056\011\206\012\075\014\006\020\047" +
    "\021\074\032\034\043\046\045\067\046\072\047\031\050" +
    "\064\051\042\054\017\055\076\056\024\057\061\060\011" +
    "\061\030\062\054\063\016\064\021\065\057\066\062\067" +
    "\050\070\005\071\012\072\063\073\020\074\025\075\055" +
    "\076\023\077\010\100\070\101\060\001\002\000\026\005" +
    "\ufff7\006\ufff7\007\ufff7\011\ufff7\013\ufff7\015\ufff7\016\ufff7" +
    "\042\ufff7\052\ufff7\053\ufff7\001\002\000\104\004\022\010" +
    "\056\012\075\014\006\020\047\021\074\032\034\043\046" +
    "\045\067\047\031\050\064\051\042\055\076\056\024\057" +
    "\061\060\011\061\030\062\054\063\016\064\021\065\057" +
    "\066\062\067\050\070\005\071\012\072\063\073\020\074" +
    "\025\075\055\076\023\077\010\100\070\101\102\001\002" +
    "\000\006\007\211\042\103\001\002\000\104\004\022\010" +
    "\056\012\075\014\006\020\047\021\074\032\034\043\046" +
    "\045\067\047\031\050\064\051\042\055\076\056\024\057" +
    "\061\060\011\061\030\062\054\063\016\064\021\065\057" +
    "\066\062\067\050\070\005\071\012\072\063\073\020\074" +
    "\025\075\055\076\023\077\010\100\070\101\102\001\002" +
    "\000\006\005\213\042\103\001\002\000\064\005\uffaa\006" +
    "\uffaa\007\uffaa\011\uffaa\013\uffaa\015\uffaa\016\uffaa\022\uffaa" +
    "\023\uffaa\024\uffaa\025\uffaa\026\uffaa\030\uffaa\031\uffaa\033" +
    "\uffaa\034\uffaa\035\uffaa\036\uffaa\037\uffaa\040\uffaa\041\uffaa" +
    "\042\uffaa\044\uffaa\052\uffaa\053\uffaa\001\002\000\100\004" +
    "\022\012\075\014\006\020\047\021\074\032\034\045\067" +
    "\047\031\050\064\051\042\055\076\056\024\057\061\060" +
    "\011\061\030\062\054\063\016\064\021\065\057\066\062" +
    "\067\050\070\005\071\012\072\063\073\020\074\025\075" +
    "\055\076\023\077\010\100\070\101\102\001\002\000\100" +
    "\004\022\012\075\014\006\020\047\021\074\032\034\045" +
    "\067\047\031\050\064\051\042\055\076\056\024\057\061" +
    "\060\011\061\030\062\054\063\016\064\021\065\057\066" +
    "\062\067\050\070\005\071\012\072\063\073\020\074\025" +
    "\075\055\076\023\077\010\100\070\101\102\001\002\000" +
    "\100\004\022\012\075\014\006\020\047\021\074\032\034" +
    "\045\067\047\031\050\064\051\042\055\076\056\024\057" +
    "\061\060\011\061\030\062\054\063\016\064\021\065\057" +
    "\066\062\067\050\070\005\071\012\072\063\073\020\074" +
    "\025\075\055\076\023\077\010\100\070\101\102\001\002" +
    "\000\064\005\uffe2\006\uffe2\007\uffe2\011\uffe2\013\uffe2\015" +
    "\uffe2\016\uffe2\022\uffe2\023\uffe2\024\uffe2\025\uffe2\026\uffe2" +
    "\030\uffe2\031\uffe2\033\uffe2\034\uffe2\035\uffe2\036\uffe2\037" +
    "\uffe2\040\uffe2\041\uffe2\042\uffe2\044\uffe2\052\uffe2\053\uffe2" +
    "\001\002\000\064\005\uffe3\006\uffe3\007\uffe3\011\uffe3\013" +
    "\uffe3\015\uffe3\016\uffe3\022\uffe3\023\uffe3\024\uffe3\025\uffe3" +
    "\026\uffe3\030\uffe3\031\uffe3\033\uffe3\034\uffe3\035\uffe3\036" +
    "\uffe3\037\uffe3\040\uffe3\041\uffe3\042\uffe3\044\uffe3\052\uffe3" +
    "\053\uffe3\001\002\000\064\005\uffe1\006\uffe1\007\uffe1\011" +
    "\uffe1\013\uffe1\015\uffe1\016\uffe1\022\uffe1\023\uffe1\024\uffe1" +
    "\025\uffe1\026\uffe1\030\uffe1\031\uffe1\033\uffe1\034\uffe1\035" +
    "\uffe1\036\uffe1\037\uffe1\040\uffe1\041\uffe1\042\uffe1\044\uffe1" +
    "\052\uffe1\053\uffe1\001\002\000\104\004\022\010\056\012" +
    "\075\014\006\020\047\021\074\032\034\043\046\045\067" +
    "\047\031\050\064\051\042\055\076\056\024\057\061\060" +
    "\011\061\030\062\054\063\016\064\021\065\057\066\062" +
    "\067\050\070\005\071\012\072\063\073\020\074\025\075" +
    "\055\076\023\077\010\100\070\101\102\001\002\000\006" +
    "\006\uffa7\042\103\001\002\000\104\004\022\010\056\012" +
    "\075\014\006\020\047\021\074\032\034\043\046\045\067" +
    "\047\031\050\064\051\042\055\076\056\024\057\061\060" +
    "\011\061\030\062\054\063\016\064\021\065\057\066\062" +
    "\067\050\070\005\071\012\072\063\073\020\074\025\075" +
    "\055\076\023\077\010\100\070\101\102\001\002\000\006" +
    "\005\226\042\103\001\002\000\064\005\uffca\006\uffca\007" +
    "\uffca\011\uffca\013\uffca\015\uffca\016\uffca\022\uffca\023\uffca" +
    "\024\uffca\025\uffca\026\uffca\030\uffca\031\uffca\033\uffca\034" +
    "\uffca\035\uffca\036\uffca\037\uffca\040\uffca\041\uffca\042\uffca" +
    "\044\uffca\052\uffca\053\uffca\001\002\000\044\005\ufff3\006" +
    "\ufff3\007\ufff3\011\ufff3\013\ufff3\015\ufff3\016\ufff3\033\234" +
    "\034\230\035\235\036\232\037\231\040\233\041\ufff3\042" +
    "\ufff3\052\ufff3\053\ufff3\001\002\000\100\004\022\012\075" +
    "\014\006\020\047\021\074\032\034\045\067\047\031\050" +
    "\064\051\042\055\076\056\024\057\061\060\011\061\030" +
    "\062\054\063\016\064\021\065\057\066\062\067\050\070" +
    "\005\071\012\072\063\073\020\074\025\075\055\076\023" +
    "\077\010\100\070\101\102\001\002\000\100\004\022\012" +
    "\075\014\006\020\047\021\074\032\034\045\067\047\031" +
    "\050\064\051\042\055\076\056\024\057\061\060\011\061" +
    "\030\062\054\063\016\064\021\065\057\066\062\067\050" +
    "\070\005\071\012\072\063\073\020\074\025\075\055\076" +
    "\023\077\010\100\070\101\102\001\002\000\100\004\022" +
    "\012\075\014\006\020\047\021\074\032\034\045\067\047" +
    "\031\050\064\051\042\055\076\056\024\057\061\060\011" +
    "\061\030\062\054\063\016\064\021\065\057\066\062\067" +
    "\050\070\005\071\012\072\063\073\020\074\025\075\055" +
    "\076\023\077\010\100\070\101\102\001\002\000\100\004" +
    "\022\012\075\014\006\020\047\021\074\032\034\045\067" +
    "\047\031\050\064\051\042\055\076\056\024\057\061\060" +
    "\011\061\030\062\054\063\016\064\021\065\057\066\062" +
    "\067\050\070\005\071\012\072\063\073\020\074\025\075" +
    "\055\076\023\077\010\100\070\101\102\001\002\000\100" +
    "\004\022\012\075\014\006\020\047\021\074\032\034\045" +
    "\067\047\031\050\064\051\042\055\076\056\024\057\061" +
    "\060\011\061\030\062\054\063\016\064\021\065\057\066" +
    "\062\067\050\070\005\071\012\072\063\073\020\074\025" +
    "\075\055\076\023\077\010\100\070\101\102\001\002\000" +
    "\100\004\022\012\075\014\006\020\047\021\074\032\034" +
    "\045\067\047\031\050\064\051\042\055\076\056\024\057" +
    "\061\060\011\061\030\062\054\063\016\064\021\065\057" +
    "\066\062\067\050\070\005\071\012\072\063\073\020\074" +
    "\025\075\055\076\023\077\010\100\070\101\102\001\002" +
    "\000\050\005\uffef\006\uffef\007\uffef\011\uffef\013\uffef\015" +
    "\uffef\016\uffef\030\237\031\240\033\uffef\034\uffef\035\uffef" +
    "\036\uffef\037\uffef\040\uffef\041\uffef\042\uffef\052\uffef\053" +
    "\uffef\001\002\000\100\004\022\012\075\014\006\020\047" +
    "\021\074\032\034\045\067\047\031\050\064\051\042\055" +
    "\076\056\024\057\061\060\011\061\030\062\054\063\016" +
    "\064\021\065\057\066\062\067\050\070\005\071\012\072" +
    "\063\073\020\074\025\075\055\076\023\077\010\100\070" +
    "\101\102\001\002\000\100\004\022\012\075\014\006\020" +
    "\047\021\074\032\034\045\067\047\031\050\064\051\042" +
    "\055\076\056\024\057\061\060\011\061\030\062\054\063" +
    "\016\064\021\065\057\066\062\067\050\070\005\071\012" +
    "\072\063\073\020\074\025\075\055\076\023\077\010\100" +
    "\070\101\102\001\002\000\056\005\uffe9\006\uffe9\007\uffe9" +
    "\011\uffe9\013\uffe9\015\uffe9\016\uffe9\022\242\023\244\030" +
    "\uffe9\031\uffe9\033\uffe9\034\uffe9\035\uffe9\036\uffe9\037\uffe9" +
    "\040\uffe9\041\uffe9\042\uffe9\044\243\052\uffe9\053\uffe9\001" +
    "\002\000\100\004\022\012\075\014\006\020\047\021\074" +
    "\032\034\045\067\047\031\050\064\051\042\055\076\056" +
    "\024\057\061\060\011\061\030\062\054\063\016\064\021" +
    "\065\057\066\062\067\050\070\005\071\012\072\063\073" +
    "\020\074\025\075\055\076\023\077\010\100\070\101\102" +
    "\001\002\000\100\004\022\012\075\014\006\020\047\021" +
    "\074\032\034\045\067\047\031\050\064\051\042\055\076" +
    "\056\024\057\061\060\011\061\030\062\054\063\016\064" +
    "\021\065\057\066\062\067\050\070\005\071\012\072\063" +
    "\073\020\074\025\075\055\076\023\077\010\100\070\101" +
    "\102\001\002\000\100\004\022\012\075\014\006\020\047" +
    "\021\074\032\034\045\067\047\031\050\064\051\042\055" +
    "\076\056\024\057\061\060\011\061\030\062\054\063\016" +
    "\064\021\065\057\066\062\067\050\070\005\071\012\072" +
    "\063\073\020\074\025\075\055\076\023\077\010\100\070" +
    "\101\102\001\002\000\064\005\uffe6\006\uffe6\007\uffe6\011" +
    "\uffe6\013\uffe6\015\uffe6\016\uffe6\022\uffe6\023\uffe6\024\215" +
    "\025\216\026\214\030\uffe6\031\uffe6\033\uffe6\034\uffe6\035" +
    "\uffe6\036\uffe6\037\uffe6\040\uffe6\041\uffe6\042\uffe6\044\uffe6" +
    "\052\uffe6\053\uffe6\001\002\000\064\005\uffe5\006\uffe5\007" +
    "\uffe5\011\uffe5\013\uffe5\015\uffe5\016\uffe5\022\uffe5\023\uffe5" +
    "\024\215\025\216\026\214\030\uffe5\031\uffe5\033\uffe5\034" +
    "\uffe5\035\uffe5\036\uffe5\037\uffe5\040\uffe5\041\uffe5\042\uffe5" +
    "\044\uffe5\052\uffe5\053\uffe5\001\002\000\064\005\uffe7\006" +
    "\uffe7\007\uffe7\011\uffe7\013\uffe7\015\uffe7\016\uffe7\022\uffe7" +
    "\023\uffe7\024\215\025\216\026\214\030\uffe7\031\uffe7\033" +
    "\uffe7\034\uffe7\035\uffe7\036\uffe7\037\uffe7\040\uffe7\041\uffe7" +
    "\042\uffe7\044\uffe7\052\uffe7\053\uffe7\001\002\000\056\005" +
    "\uffea\006\uffea\007\uffea\011\uffea\013\uffea\015\uffea\016\uffea" +
    "\022\242\023\244\030\uffea\031\uffea\033\uffea\034\uffea\035" +
    "\uffea\036\uffea\037\uffea\040\uffea\041\uffea\042\uffea\044\243" +
    "\052\uffea\053\uffea\001\002\000\050\005\ufff1\006\ufff1\007" +
    "\ufff1\011\ufff1\013\ufff1\015\ufff1\016\ufff1\030\237\031\240" +
    "\033\ufff1\034\ufff1\035\ufff1\036\ufff1\037\ufff1\040\ufff1\041" +
    "\ufff1\042\ufff1\052\ufff1\053\ufff1\001\002\000\050\005\uffec" +
    "\006\uffec\007\uffec\011\uffec\013\uffec\015\uffec\016\uffec\030" +
    "\237\031\240\033\uffec\034\uffec\035\uffec\036\uffec\037\uffec" +
    "\040\uffec\041\uffec\042\uffec\052\uffec\053\uffec\001\002\000" +
    "\050\005\uffee\006\uffee\007\uffee\011\uffee\013\uffee\015\uffee" +
    "\016\uffee\030\237\031\240\033\uffee\034\uffee\035\uffee\036" +
    "\uffee\037\uffee\040\uffee\041\uffee\042\uffee\052\uffee\053\uffee" +
    "\001\002\000\050\005\uffed\006\uffed\007\uffed\011\uffed\013" +
    "\uffed\015\uffed\016\uffed\030\237\031\240\033\uffed\034\uffed" +
    "\035\uffed\036\uffed\037\uffed\040\uffed\041\uffed\042\uffed\052" +
    "\uffed\053\uffed\001\002\000\050\005\ufff0\006\ufff0\007\ufff0" +
    "\011\ufff0\013\ufff0\015\ufff0\016\ufff0\030\237\031\240\033" +
    "\ufff0\034\ufff0\035\ufff0\036\ufff0\037\ufff0\040\ufff0\041\ufff0" +
    "\042\ufff0\052\ufff0\053\ufff0\001\002\000\174\002\ufffd\004" +
    "\ufffd\005\ufffd\006\ufffd\007\ufffd\010\ufffd\011\ufffd\012\ufffd" +
    "\013\ufffd\014\ufffd\015\ufffd\016\ufffd\020\ufffd\021\ufffd\022" +
    "\ufffd\023\ufffd\024\ufffd\025\ufffd\026\ufffd\030\ufffd\031\ufffd" +
    "\032\ufffd\033\ufffd\034\ufffd\035\ufffd\036\ufffd\037\ufffd\040" +
    "\ufffd\041\ufffd\042\ufffd\043\ufffd\044\ufffd\045\ufffd\046\ufffd" +
    "\047\ufffd\050\ufffd\051\ufffd\052\ufffd\053\ufffd\054\ufffd\055" +
    "\ufffd\056\ufffd\057\ufffd\060\ufffd\061\ufffd\062\ufffd\063\ufffd" +
    "\064\ufffd\065\ufffd\066\ufffd\067\ufffd\070\ufffd\071\ufffd\072" +
    "\ufffd\073\ufffd\074\ufffd\075\ufffd\076\ufffd\077\ufffd\100\ufffd" +
    "\101\ufffd\001\002\000\006\042\103\052\260\001\002\000" +
    "\104\004\022\010\056\012\075\014\006\020\047\021\074" +
    "\032\034\043\046\045\067\047\031\050\064\051\042\055" +
    "\076\056\024\057\061\060\011\061\030\062\054\063\016" +
    "\064\021\065\057\066\062\067\050\070\005\071\012\072" +
    "\063\073\020\074\025\075\055\076\023\077\010\100\070" +
    "\101\102\001\002\000\010\006\uffb0\042\103\053\262\001" +
    "\002\000\104\004\022\010\056\012\075\014\006\020\047" +
    "\021\074\032\034\043\046\045\067\047\031\050\064\051" +
    "\042\055\076\056\024\057\061\060\011\061\030\062\054" +
    "\063\016\064\021\065\057\066\062\067\050\070\005\071" +
    "\012\072\063\073\020\074\025\075\055\076\023\077\010" +
    "\100\070\101\102\001\002\000\006\006\uffaf\042\103\001" +
    "\002\000\064\005\uffdf\006\uffdf\007\uffdf\011\uffdf\013\uffdf" +
    "\015\uffdf\016\uffdf\022\uffdf\023\uffdf\024\uffdf\025\uffdf\026" +
    "\uffdf\030\uffdf\031\uffdf\033\uffdf\034\uffdf\035\uffdf\036\uffdf" +
    "\037\uffdf\040\uffdf\041\uffdf\042\uffdf\044\uffdf\052\uffdf\053" +
    "\uffdf\001\002\000\174\002\ufffb\004\ufffb\005\ufffb\006\ufffb" +
    "\007\ufffb\010\ufffb\011\ufffb\012\ufffb\013\ufffb\014\ufffb\015" +
    "\ufffb\016\ufffb\020\ufffb\021\ufffb\022\ufffb\023\ufffb\024\ufffb" +
    "\025\ufffb\026\ufffb\030\ufffb\031\ufffb\032\ufffb\033\ufffb\034" +
    "\ufffb\035\ufffb\036\ufffb\037\ufffb\040\ufffb\041\ufffb\042\ufffb" +
    "\043\ufffb\044\ufffb\045\ufffb\046\ufffb\047\ufffb\050\ufffb\051" +
    "\ufffb\052\ufffb\053\ufffb\054\ufffb\055\ufffb\056\ufffb\057\ufffb" +
    "\060\ufffb\061\ufffb\062\ufffb\063\ufffb\064\ufffb\065\ufffb\066" +
    "\ufffb\067\ufffb\070\ufffb\071\ufffb\072\ufffb\073\ufffb\074\ufffb" +
    "\075\ufffb\076\ufffb\077\ufffb\100\ufffb\101\ufffb\001\002\000" +
    "\104\004\022\010\056\012\075\014\006\020\047\021\074" +
    "\032\034\043\046\045\067\047\031\050\064\051\042\055" +
    "\076\056\024\057\061\060\011\061\030\062\054\063\016" +
    "\064\021\065\057\066\062\067\050\070\005\071\012\072" +
    "\063\073\020\074\025\075\055\076\023\077\010\100\070" +
    "\101\102\001\002\000\006\007\270\042\103\001\002\000" +
    "\104\004\022\010\056\012\075\014\006\020\047\021\074" +
    "\032\034\043\046\045\067\047\031\050\064\051\042\055" +
    "\076\056\024\057\061\060\011\061\030\062\054\063\016" +
    "\064\021\065\057\066\062\067\050\070\005\071\012\072" +
    "\063\073\020\074\025\075\055\076\023\077\010\100\070" +
    "\101\102\001\002\000\006\005\272\042\103\001\002\000" +
    "\064\005\uffba\006\uffba\007\uffba\011\uffba\013\uffba\015\uffba" +
    "\016\uffba\022\uffba\023\uffba\024\uffba\025\uffba\026\uffba\030" +
    "\uffba\031\uffba\033\uffba\034\uffba\035\uffba\036\uffba\037\uffba" +
    "\040\uffba\041\uffba\042\uffba\044\uffba\052\uffba\053\uffba\001" +
    "\002\000\104\004\022\010\056\012\075\014\006\020\047" +
    "\021\074\032\034\043\046\045\067\047\031\050\064\051" +
    "\042\055\076\056\024\057\061\060\011\061\030\062\054" +
    "\063\016\064\021\065\057\066\062\067\050\070\005\071" +
    "\012\072\063\073\020\074\025\075\055\076\023\077\010" +
    "\100\070\101\102\001\002\000\006\005\275\042\103\001" +
    "\002\000\064\005\uffc2\006\uffc2\007\uffc2\011\uffc2\013\uffc2" +
    "\015\uffc2\016\uffc2\022\uffc2\023\uffc2\024\uffc2\025\uffc2\026" +
    "\uffc2\030\uffc2\031\uffc2\033\uffc2\034\uffc2\035\uffc2\036\uffc2" +
    "\037\uffc2\040\uffc2\041\uffc2\042\uffc2\044\uffc2\052\uffc2\053" +
    "\uffc2\001\002\000\104\004\022\010\056\012\075\014\006" +
    "\020\047\021\074\032\034\043\046\045\067\047\031\050" +
    "\064\051\042\055\076\056\024\057\061\060\011\061\030" +
    "\062\054\063\016\064\021\065\057\066\062\067\050\070" +
    "\005\071\012\072\063\073\020\074\025\075\055\076\023" +
    "\077\010\100\070\101\102\001\002\000\006\005\300\042" +
    "\103\001\002\000\064\005\uffad\006\uffad\007\uffad\011\uffad" +
    "\013\uffad\015\uffad\016\uffad\022\uffad\023\uffad\024\uffad\025" +
    "\uffad\026\uffad\030\uffad\031\uffad\033\uffad\034\uffad\035\uffad" +
    "\036\uffad\037\uffad\040\uffad\041\uffad\042\uffad\044\uffad\052" +
    "\uffad\053\uffad\001\002\000\006\005\302\042\103\001\002" +
    "\000\066\004\303\005\uffc0\006\uffc0\007\uffc0\011\uffc0\013" +
    "\uffc0\015\uffc0\016\uffc0\022\uffc0\023\uffc0\024\uffc0\025\uffc0" +
    "\026\uffc0\030\uffc0\031\uffc0\033\uffc0\034\uffc0\035\uffc0\036" +
    "\uffc0\037\uffc0\040\uffc0\041\uffc0\042\uffc0\044\uffc0\052\uffc0" +
    "\053\uffc0\001\002\000\106\004\022\005\uff9c\010\056\012" +
    "\075\014\006\020\047\021\074\032\034\043\046\045\067" +
    "\047\031\050\064\051\042\055\076\056\024\057\061\060" +
    "\011\061\030\062\054\063\016\064\021\065\057\066\062" +
    "\067\050\070\005\071\012\072\063\073\020\074\025\075" +
    "\055\076\023\077\010\100\070\101\102\001\002\000\004" +
    "\005\305\001\002\000\064\005\uffb9\006\uffb9\007\uffb9\011" +
    "\uffb9\013\uffb9\015\uffb9\016\uffb9\022\uffb9\023\uffb9\024\uffb9" +
    "\025\uffb9\026\uffb9\030\uffb9\031\uffb9\033\uffb9\034\uffb9\035" +
    "\uffb9\036\uffb9\037\uffb9\040\uffb9\041\uffb9\042\uffb9\044\uffb9" +
    "\052\uffb9\053\uffb9\001\002\000\104\004\022\010\056\012" +
    "\075\014\006\020\047\021\074\032\034\043\046\045\067" +
    "\047\031\050\064\051\042\055\076\056\024\057\061\060" +
    "\011\061\030\062\054\063\016\064\021\065\057\066\062" +
    "\067\050\070\005\071\012\072\063\073\020\074\025\075" +
    "\055\076\023\077\010\100\070\101\102\001\002\000\006" +
    "\005\310\042\103\001\002\000\064\005\uffcd\006\uffcd\007" +
    "\uffcd\011\uffcd\013\uffcd\015\uffcd\016\uffcd\022\uffcd\023\uffcd" +
    "\024\uffcd\025\uffcd\026\uffcd\030\uffcd\031\uffcd\033\uffcd\034" +
    "\uffcd\035\uffcd\036\uffcd\037\uffcd\040\uffcd\041\uffcd\042\uffcd" +
    "\044\uffcd\052\uffcd\053\uffcd\001\002\000\104\004\022\010" +
    "\056\012\075\014\006\020\047\021\074\032\034\043\046" +
    "\045\067\047\031\050\064\051\042\055\076\056\024\057" +
    "\061\060\011\061\030\062\054\063\016\064\021\065\057" +
    "\066\062\067\050\070\005\071\012\072\063\073\020\074" +
    "\025\075\055\076\023\077\010\100\070\101\102\001\002" +
    "\000\006\007\317\011\320\001\002\000\006\016\315\042" +
    "\103\001\002\000\006\007\uffa1\011\uffa1\001\002\000\104" +
    "\004\022\010\056\012\075\014\006\020\047\021\074\032" +
    "\034\043\046\045\067\047\031\050\064\051\042\055\076" +
    "\056\024\057\061\060\011\061\030\062\054\063\016\064" +
    "\021\065\057\066\062\067\050\070\005\071\012\072\063" +
    "\073\020\074\025\075\055\076\023\077\010\100\070\101" +
    "\102\001\002\000\010\007\uffa0\011\uffa0\042\103\001\002" +
    "\000\104\004\022\010\056\012\075\014\006\020\047\021" +
    "\074\032\034\043\046\045\067\047\031\050\064\051\042" +
    "\055\076\056\024\057\061\060\011\061\030\062\054\063" +
    "\016\064\021\065\057\066\062\067\050\070\005\071\012" +
    "\072\063\073\020\074\025\075\055\076\023\077\010\100" +
    "\070\101\102\001\002\000\174\002\uffa3\004\uffa3\005\uffa3" +
    "\006\uffa3\007\uffa3\010\uffa3\011\uffa3\012\uffa3\013\uffa3\014" +
    "\uffa3\015\uffa3\016\uffa3\020\uffa3\021\uffa3\022\uffa3\023\uffa3" +
    "\024\uffa3\025\uffa3\026\uffa3\030\uffa3\031\uffa3\032\uffa3\033" +
    "\uffa3\034\uffa3\035\uffa3\036\uffa3\037\uffa3\040\uffa3\041\uffa3" +
    "\042\uffa3\043\uffa3\044\uffa3\045\uffa3\046\uffa3\047\uffa3\050" +
    "\uffa3\051\uffa3\052\uffa3\053\uffa3\054\uffa3\055\uffa3\056\uffa3" +
    "\057\uffa3\060\uffa3\061\uffa3\062\uffa3\063\uffa3\064\uffa3\065" +
    "\uffa3\066\uffa3\067\uffa3\070\uffa3\071\uffa3\072\uffa3\073\uffa3" +
    "\074\uffa3\075\uffa3\076\uffa3\077\uffa3\100\uffa3\101\uffa3\001" +
    "\002\000\006\007\uffa2\011\uffa2\001\002\000\104\004\022" +
    "\010\056\012\075\014\006\020\047\021\074\032\034\043" +
    "\046\045\067\047\031\050\064\051\042\055\076\056\024" +
    "\057\061\060\011\061\030\062\054\063\016\064\021\065" +
    "\057\066\062\067\050\070\005\071\012\072\063\073\020" +
    "\074\025\075\055\076\023\077\010\100\070\101\102\001" +
    "\002\000\006\005\324\042\103\001\002\000\064\005\uffce" +
    "\006\uffce\007\uffce\011\uffce\013\uffce\015\uffce\016\uffce\022" +
    "\uffce\023\uffce\024\uffce\025\uffce\026\uffce\030\uffce\031\uffce" +
    "\033\uffce\034\uffce\035\uffce\036\uffce\037\uffce\040\uffce\041" +
    "\uffce\042\uffce\044\uffce\052\uffce\053\uffce\001\002\000\174" +
    "\002\ufffc\004\ufffc\005\ufffc\006\ufffc\007\ufffc\010\ufffc\011" +
    "\ufffc\012\ufffc\013\ufffc\014\ufffc\015\ufffc\016\ufffc\020\ufffc" +
    "\021\ufffc\022\ufffc\023\ufffc\024\ufffc\025\ufffc\026\ufffc\030" +
    "\ufffc\031\ufffc\032\ufffc\033\ufffc\034\ufffc\035\ufffc\036\ufffc" +
    "\037\ufffc\040\ufffc\041\ufffc\042\ufffc\043\ufffc\044\ufffc\045" +
    "\ufffc\046\ufffc\047\ufffc\050\ufffc\051\ufffc\052\ufffc\053\ufffc" +
    "\054\ufffc\055\ufffc\056\ufffc\057\ufffc\060\ufffc\061\ufffc\062" +
    "\ufffc\063\ufffc\064\ufffc\065\ufffc\066\ufffc\067\ufffc\070\ufffc" +
    "\071\ufffc\072\ufffc\073\ufffc\074\ufffc\075\ufffc\076\ufffc\077" +
    "\ufffc\100\ufffc\101\ufffc\001\002\000\104\004\022\010\056" +
    "\012\075\014\006\020\047\021\074\032\034\043\046\045" +
    "\067\047\031\050\064\051\042\055\076\056\024\057\061" +
    "\060\011\061\030\062\054\063\016\064\021\065\057\066" +
    "\062\067\050\070\005\071\012\072\063\073\020\074\025" +
    "\075\055\076\023\077\010\100\070\101\102\001\002\000" +
    "\006\007\330\042\103\001\002\000\104\004\022\010\056" +
    "\012\075\014\006\020\047\021\074\032\034\043\046\045" +
    "\067\047\031\050\064\051\042\055\076\056\024\057\061" +
    "\060\011\061\030\062\054\063\016\064\021\065\057\066" +
    "\062\067\050\070\005\071\012\072\063\073\020\074\025" +
    "\075\055\076\023\077\010\100\070\101\102\001\002\000" +
    "\006\005\332\042\103\001\002\000\064\005\uffc7\006\uffc7" +
    "\007\uffc7\011\uffc7\013\uffc7\015\uffc7\016\uffc7\022\uffc7\023" +
    "\uffc7\024\uffc7\025\uffc7\026\uffc7\030\uffc7\031\uffc7\033\uffc7" +
    "\034\uffc7\035\uffc7\036\uffc7\037\uffc7\040\uffc7\041\uffc7\042" +
    "\uffc7\044\uffc7\052\uffc7\053\uffc7\001\002\000\004\005\uff9c" +
    "\001\002\000\004\005\335\001\002\000\064\005\uffab\006" +
    "\uffab\007\uffab\011\uffab\013\uffab\015\uffab\016\uffab\022\uffab" +
    "\023\uffab\024\uffab\025\uffab\026\uffab\030\uffab\031\uffab\033" +
    "\uffab\034\uffab\035\uffab\036\uffab\037\uffab\040\uffab\041\uffab" +
    "\042\uffab\044\uffab\052\uffab\053\uffab\001\002\000\006\007" +
    "\166\015\337\001\002\000\064\005\uffc9\006\uffc9\007\uffc9" +
    "\011\uffc9\013\uffc9\015\uffc9\016\uffc9\022\uffc9\023\uffc9\024" +
    "\uffc9\025\uffc9\026\uffc9\030\uffc9\031\uffc9\033\uffc9\034\uffc9" +
    "\035\uffc9\036\uffc9\037\uffc9\040\uffc9\041\uffc9\042\uffc9\044" +
    "\uffc9\052\uffc9\053\uffc9\001\002\000\104\004\022\010\056" +
    "\012\075\014\006\020\047\021\074\032\034\043\046\045" +
    "\067\047\031\050\064\051\042\055\076\056\024\057\061" +
    "\060\011\061\030\062\054\063\016\064\021\065\057\066" +
    "\062\067\050\070\005\071\012\072\063\073\020\074\025" +
    "\075\055\076\023\077\010\100\070\101\102\001\002\000" +
    "\006\007\342\042\103\001\002\000\104\004\022\010\056" +
    "\012\075\014\006\020\047\021\074\032\034\043\046\045" +
    "\067\047\031\050\064\051\042\055\076\056\024\057\061" +
    "\060\011\061\030\062\054\063\016\064\021\065\057\066" +
    "\062\067\050\070\005\071\012\072\063\073\020\074\025" +
    "\075\055\076\023\077\010\100\070\101\102\001\002\000" +
    "\006\005\344\042\103\001\002\000\064\005\uffc8\006\uffc8" +
    "\007\uffc8\011\uffc8\013\uffc8\015\uffc8\016\uffc8\022\uffc8\023" +
    "\uffc8\024\uffc8\025\uffc8\026\uffc8\030\uffc8\031\uffc8\033\uffc8" +
    "\034\uffc8\035\uffc8\036\uffc8\037\uffc8\040\uffc8\041\uffc8\042" +
    "\uffc8\044\uffc8\052\uffc8\053\uffc8\001\002\000\004\002\000" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\343\000\064\003\003\004\076\005\006\006\044\007" +
    "\052\010\072\011\040\012\037\013\025\014\036\015\035" +
    "\016\032\020\014\021\031\022\070\023\043\025\064\031" +
    "\050\033\065\034\051\042\012\043\034\044\026\045\042" +
    "\046\013\001\001\000\002\001\001\000\002\001\001\000" +
    "\046\006\162\007\052\010\072\011\040\012\037\013\025" +
    "\014\036\015\035\016\032\022\070\023\043\025\064\027" +
    "\335\042\012\043\034\044\026\045\042\046\013\001\001" +
    "\000\060\004\132\006\044\007\052\010\072\011\040\012" +
    "\037\013\025\014\036\015\035\016\032\020\014\021\031" +
    "\022\070\023\043\025\064\031\050\033\065\034\051\042" +
    "\012\043\034\044\026\045\042\046\013\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\044\006\300\007\052\010\072\011\040\012\037\013\025" +
    "\014\036\015\035\016\032\022\070\023\043\025\064\042" +
    "\012\043\034\044\026\045\042\046\013\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\010\072\013" +
    "\263\022\070\023\043\025\064\042\012\043\034\044\026" +
    "\045\042\046\013\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\006\256\007\052\010\072\011\040\012\037\013" +
    "\025\014\036\015\035\016\032\022\070\023\043\025\064" +
    "\042\012\043\034\044\026\045\042\046\013\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\007\052\010\072\013\025\014\226\015\035\016\032\022" +
    "\070\023\043\025\064\042\012\043\034\044\026\045\042" +
    "\046\013\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\062\004\076\005\204\006" +
    "\044\007\052\010\072\011\040\012\037\013\025\014\036" +
    "\015\035\016\032\020\014\021\031\022\070\023\043\025" +
    "\064\031\050\033\065\034\051\042\012\043\034\044\026" +
    "\045\042\046\013\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\050\006" +
    "\111\007\052\010\072\011\040\012\037\013\025\014\036" +
    "\015\035\016\032\017\107\022\070\023\043\025\064\030" +
    "\110\042\012\043\034\044\026\045\042\046\013\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\006\100\007" +
    "\052\010\072\011\040\012\037\013\025\014\036\015\035" +
    "\016\032\022\070\023\043\025\064\042\012\043\034\044" +
    "\026\045\042\046\013\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\007\052\010\072\011\104\012\037\013" +
    "\025\014\036\015\035\016\032\022\070\023\043\025\064" +
    "\042\012\043\034\044\026\045\042\046\013\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\007\052\010\072" +
    "\012\106\013\025\014\036\015\035\016\032\022\070\023" +
    "\043\025\064\042\012\043\034\044\026\045\042\046\013" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\044\006\113\007\052\010\072" +
    "\011\040\012\037\013\025\014\036\015\035\016\032\022" +
    "\070\023\043\025\064\042\012\043\034\044\026\045\042" +
    "\046\013\001\001\000\002\001\001\000\046\006\111\007" +
    "\052\010\072\011\040\012\037\013\025\014\036\015\035" +
    "\016\032\017\116\022\070\023\043\025\064\042\012\043" +
    "\034\044\026\045\042\046\013\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\006\120\007\052\010\072\011" +
    "\040\012\037\013\025\014\036\015\035\016\032\022\070" +
    "\023\043\025\064\042\012\043\034\044\026\045\042\046" +
    "\013\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\037\123\040\125\051\124\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\040\133\001\001\000\062\004\076\005\131\006\044\007" +
    "\052\010\072\011\040\012\037\013\025\014\036\015\035" +
    "\016\032\020\014\021\031\022\070\023\043\025\064\031" +
    "\050\033\065\034\051\042\012\043\034\044\026\045\042" +
    "\046\013\001\001\000\060\004\132\006\044\007\052\010" +
    "\072\011\040\012\037\013\025\014\036\015\035\016\032" +
    "\020\014\021\031\022\070\023\043\025\064\031\050\033" +
    "\065\034\051\042\012\043\034\044\026\045\042\046\013" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\047\136\050\137\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\006\142\007" +
    "\052\010\072\011\040\012\037\013\025\014\036\015\035" +
    "\016\032\022\070\023\043\025\064\042\012\043\034\044" +
    "\026\045\042\046\013\001\001\000\002\001\001\000\004" +
    "\047\147\001\001\000\044\006\145\007\052\010\072\011" +
    "\040\012\037\013\025\014\036\015\035\016\032\022\070" +
    "\023\043\025\064\042\012\043\034\044\026\045\042\046" +
    "\013\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\044\006\151\007\052\010\072\011\040\012" +
    "\037\013\025\014\036\015\035\016\032\022\070\023\043" +
    "\025\064\042\012\043\034\044\026\045\042\046\013\001" +
    "\001\000\002\001\001\000\044\006\153\007\052\010\072" +
    "\011\040\012\037\013\025\014\036\015\035\016\032\022" +
    "\070\023\043\025\064\042\012\043\034\044\026\045\042" +
    "\046\013\001\001\000\002\001\001\000\044\006\155\007" +
    "\052\010\072\011\040\012\037\013\025\014\036\015\035" +
    "\016\032\022\070\023\043\025\064\042\012\043\034\044" +
    "\026\045\042\046\013\001\001\000\002\001\001\000\002" +
    "\001\001\000\052\006\162\007\052\010\072\011\040\012" +
    "\037\013\025\014\036\015\035\016\032\022\070\023\043" +
    "\025\064\026\163\027\161\042\012\043\034\044\026\045" +
    "\042\046\013\051\160\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\044\006\166\007\052\010\072\011\040\012\037" +
    "\013\025\014\036\015\035\016\032\022\070\023\043\025" +
    "\064\042\012\043\034\044\026\045\042\046\013\001\001" +
    "\000\002\001\001\000\004\051\170\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\032\175\001\001\000\044" +
    "\006\174\007\052\010\072\011\040\012\037\013\025\014" +
    "\036\015\035\016\032\022\070\023\043\025\064\042\012" +
    "\043\034\044\026\045\042\046\013\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\006\202\007\052\010\072\011" +
    "\040\012\037\013\025\014\036\015\035\016\032\022\070" +
    "\023\043\025\064\042\012\043\034\044\026\045\042\046" +
    "\013\001\001\000\002\001\001\000\002\001\001\000\060" +
    "\004\132\006\044\007\052\010\072\011\040\012\037\013" +
    "\025\014\036\015\035\016\032\020\014\021\031\022\070" +
    "\023\043\025\064\031\050\033\065\034\051\042\012\043" +
    "\034\044\026\045\042\046\013\001\001\000\002\001\001" +
    "\000\044\006\207\007\052\010\072\011\040\012\037\013" +
    "\025\014\036\015\035\016\032\022\070\023\043\025\064" +
    "\042\012\043\034\044\026\045\042\046\013\001\001\000" +
    "\002\001\001\000\044\006\211\007\052\010\072\011\040" +
    "\012\037\013\025\014\036\015\035\016\032\022\070\023" +
    "\043\025\064\042\012\043\034\044\026\045\042\046\013" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\010" +
    "\072\013\220\022\070\023\043\025\064\042\012\043\034" +
    "\044\026\045\042\046\013\001\001\000\026\010\072\013" +
    "\217\022\070\023\043\025\064\042\012\043\034\044\026" +
    "\045\042\046\013\001\001\000\026\010\072\013\216\022" +
    "\070\023\043\025\064\042\012\043\034\044\026\045\042" +
    "\046\013\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\044\006\222\007\052\010\072\011\040" +
    "\012\037\013\025\014\036\015\035\016\032\022\070\023" +
    "\043\025\064\042\012\043\034\044\026\045\042\046\013" +
    "\001\001\000\002\001\001\000\044\006\224\007\052\010" +
    "\072\011\040\012\037\013\025\014\036\015\035\016\032" +
    "\022\070\023\043\025\064\042\012\043\034\044\026\045" +
    "\042\046\013\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\007\052\010\072\013\025\015" +
    "\254\016\032\022\070\023\043\025\064\042\012\043\034" +
    "\044\026\045\042\046\013\001\001\000\034\007\052\010" +
    "\072\013\025\015\253\016\032\022\070\023\043\025\064" +
    "\042\012\043\034\044\026\045\042\046\013\001\001\000" +
    "\034\007\052\010\072\013\025\015\252\016\032\022\070" +
    "\023\043\025\064\042\012\043\034\044\026\045\042\046" +
    "\013\001\001\000\034\007\052\010\072\013\025\015\251" +
    "\016\032\022\070\023\043\025\064\042\012\043\034\044" +
    "\026\045\042\046\013\001\001\000\034\007\052\010\072" +
    "\013\025\015\250\016\032\022\070\023\043\025\064\042" +
    "\012\043\034\044\026\045\042\046\013\001\001\000\034" +
    "\007\052\010\072\013\025\015\235\016\032\022\070\023" +
    "\043\025\064\042\012\043\034\044\026\045\042\046\013" +
    "\001\001\000\002\001\001\000\032\007\052\010\072\013" +
    "\025\016\247\022\070\023\043\025\064\042\012\043\034" +
    "\044\026\045\042\046\013\001\001\000\032\007\052\010" +
    "\072\013\025\016\240\022\070\023\043\025\064\042\012" +
    "\043\034\044\026\045\042\046\013\001\001\000\002\001" +
    "\001\000\030\007\246\010\072\013\025\022\070\023\043" +
    "\025\064\042\012\043\034\044\026\045\042\046\013\001" +
    "\001\000\030\007\245\010\072\013\025\022\070\023\043" +
    "\025\064\042\012\043\034\044\026\045\042\046\013\001" +
    "\001\000\030\007\244\010\072\013\025\022\070\023\043" +
    "\025\064\042\012\043\034\044\026\045\042\046\013\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\044\006\260\007\052\010" +
    "\072\011\040\012\037\013\025\014\036\015\035\016\032" +
    "\022\070\023\043\025\064\042\012\043\034\044\026\045" +
    "\042\046\013\001\001\000\002\001\001\000\044\006\262" +
    "\007\052\010\072\011\040\012\037\013\025\014\036\015" +
    "\035\016\032\022\070\023\043\025\064\042\012\043\034" +
    "\044\026\045\042\046\013\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\044\006\266\007\052" +
    "\010\072\011\040\012\037\013\025\014\036\015\035\016" +
    "\032\022\070\023\043\025\064\042\012\043\034\044\026" +
    "\045\042\046\013\001\001\000\002\001\001\000\044\006" +
    "\270\007\052\010\072\011\040\012\037\013\025\014\036" +
    "\015\035\016\032\022\070\023\043\025\064\042\012\043" +
    "\034\044\026\045\042\046\013\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\006\273\007\052\010\072\011" +
    "\040\012\037\013\025\014\036\015\035\016\032\022\070" +
    "\023\043\025\064\042\012\043\034\044\026\045\042\046" +
    "\013\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\006\276\007\052\010\072\011\040\012\037\013\025\014" +
    "\036\015\035\016\032\022\070\023\043\025\064\042\012" +
    "\043\034\044\026\045\042\046\013\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\052\006\162\007\052\010\072\011\040\012\037\013" +
    "\025\014\036\015\035\016\032\022\070\023\043\025\064" +
    "\026\303\027\161\042\012\043\034\044\026\045\042\046" +
    "\013\051\160\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\006\306\007\052\010\072\011\040\012\037\013" +
    "\025\014\036\015\035\016\032\022\070\023\043\025\064" +
    "\042\012\043\034\044\026\045\042\046\013\001\001\000" +
    "\002\001\001\000\002\001\001\000\050\006\312\007\052" +
    "\010\072\011\040\012\037\013\025\014\036\015\035\016" +
    "\032\022\070\023\043\025\064\035\311\036\313\042\012" +
    "\043\034\044\026\045\042\046\013\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\044\006\315" +
    "\007\052\010\072\011\040\012\037\013\025\014\036\015" +
    "\035\016\032\022\070\023\043\025\064\042\012\043\034" +
    "\044\026\045\042\046\013\001\001\000\002\001\001\000" +
    "\046\006\312\007\052\010\072\011\040\012\037\013\025" +
    "\014\036\015\035\016\032\022\070\023\043\025\064\036" +
    "\320\042\012\043\034\044\026\045\042\046\013\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\006\322\007" +
    "\052\010\072\011\040\012\037\013\025\014\036\015\035" +
    "\016\032\022\070\023\043\025\064\042\012\043\034\044" +
    "\026\045\042\046\013\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\044\006\326\007\052\010" +
    "\072\011\040\012\037\013\025\014\036\015\035\016\032" +
    "\022\070\023\043\025\064\042\012\043\034\044\026\045" +
    "\042\046\013\001\001\000\002\001\001\000\044\006\330" +
    "\007\052\010\072\011\040\012\037\013\025\014\036\015" +
    "\035\016\032\022\070\023\043\025\064\042\012\043\034" +
    "\044\026\045\042\046\013\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\051\333\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\044\006\340\007\052\010\072\011\040\012\037\013\025" +
    "\014\036\015\035\016\032\022\070\023\043\025\064\042" +
    "\012\043\034\044\026\045\042\046\013\001\001\000\002" +
    "\001\001\000\044\006\342\007\052\010\072\011\040\012" +
    "\037\013\025\014\036\015\035\016\032\022\070\023\043" +
    "\025\064\042\012\043\034\044\026\045\042\046\013\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SMPLParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SMPLParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SMPLParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    //  This is no longer needed for CUP v0.11
		// Create a lexer that reads from
		// supplied input stream or standard input
		// if (in == null)
		//    in = System.in;
		// lexer = new Lexer(in);
	  
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

		try {
		    return lexer.next_token();
		} catch (java.io.IOException ioe) {
		    System.out.println("Line " + lexer.getLine() + ", pos " +
				       lexer.getChar() +
				       ": Unrecognised token");
		    System.out.println(ioe.getMessage());
		    throw ioe;
		}
	  
    }


		SMPLLexer lexer;

		public SMPLParser(SMPLLexer l) {
		    // As of CUP v0.11, need to pass Lexer to superclass
		    super(l);
		    lexer = l;
		}

		public void report_error(String message, Object info) {
		    System.err.println(message);
		}

		public void syntax_error(Symbol cur_token) {
		    System.err.print("Line " + lexer.getLine() +
				     " near char " + lexer.getChar() + ": ");
		    report_error("Syntax error", cur_token);
		    System.err.println ("Encountered " + cur_token +
					" just before: " +
					 lexer.getText());
		}
	    
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SMPLParser$actions {
  private final SMPLParser parser;

  /** Constructor */
  CUP$SMPLParser$actions(SMPLParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SMPLParser$do_action(
    int                        CUP$SMPLParser$act_num,
    java_cup.runtime.lr_parser CUP$SMPLParser$parser,
    java.util.Stack            CUP$SMPLParser$stack,
    int                        CUP$SMPLParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SMPLParser$result;

      /* select the action based on the action number */
      switch (CUP$SMPLParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // empty ::= 
            {
              Object RESULT = null;

              CUP$SMPLParser$result = new java_cup.runtime.Symbol(39/*empty*/, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right, RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // bindingList ::= binding 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).value;
		 
                                ArrayList<ASTNode> lst = new ArrayList<ASTNode>();
                                lst.add( (ASTNode)e );
                                RESULT = lst;
                            
              CUP$SMPLParser$result = new java_cup.runtime.Symbol(38/*bindingList*/, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right, RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // bindingList ::= bindingList COMMA binding 
            {
              Object RESULT = null;
		int elleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).value;
		 RESULT = el; ((ArrayList<ASTNode>)el).add( (ASTNode)e ); 
              CUP$SMPLParser$result = new java_cup.runtime.Symbol(38/*bindingList*/, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right, RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // binding ::= VARIABLE BE expression 
            {
              Object RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).value;
		 RESULT = new ASTAssignExp( v, e ); 
              CUP$SMPLParser$result = new java_cup.runtime.Symbol(37/*binding*/, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right, RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // caseExp ::= expression COLON expression 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ASTNode e1 = (ASTNode)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right;
		ASTNode e2 = (ASTNode)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).value;
		 RESULT = new ASTCaseExp( e1, e2 ); 
              CUP$SMPLParser$result = new java_cup.runtime.Symbol(28/*caseExp*/, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right, RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // caseExpList ::= caseExp 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).value;
		 
                                ArrayList<ASTNode> lst = new ArrayList<ASTNode>();
                                lst.add( (ASTNode)e );
                                RESULT = lst;
                          
              CUP$SMPLParser$result = new java_cup.runtime.Symbol(27/*caseExpList*/, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right, RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // caseExpList ::= caseExpList COMMA caseExp 
            {
              Object RESULT = null;
		int celleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int celright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Object cel = (Object)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).value;
		 RESULT = cel; ((ArrayList<ASTNode>)cel).add((ASTNode)e); 
              CUP$SMPLParser$result = new java_cup.runtime.Symbol(27/*caseExpList*/, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right, RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // caseStmt ::= CASE LBRACE caseExpList RBRACE 
            {
              Object RESULT = null;
		int celleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int celright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Object cel = (Object)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new ASTCaseStmtExp( (ArrayList<ASTNode>)cel); 
              CUP$SMPLParser$result = new java_cup.runtime.Symbol(26/*caseStmt*/, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right, RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // variableList2 ::= VARIABLE 
            {
              Object RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).value;
		 
                                ArrayList<String> lst = new ArrayList<String>();
                                lst.add( v );
                                RESULT = lst;
                             
              CUP$SMPLParser$result = new java_cup.runtime.Symbol(24/*variableList2*/, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right, RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // variableList2 ::= variableList2 COMMA VARIABLE 
            {
              Object RESULT = null;
		int vlleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Object vl = (Object)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).value;
		 RESULT = vl; ((ArrayList<String>)vl).add(v);
              CUP$SMPLParser$result = new java_cup.runtime.Symbol(24/*variableList2*/, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right, RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // variableList ::= VARIABLE COMMA variableList2 
            {
              Object RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int vlleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right;
		Object vl = (Object)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).value;
		 RESULT = vl; ((ArrayList<String>)vl).add(0, v); 
              CUP$SMPLParser$result = new java_cup.runtime.Symbol(23/*variableList*/, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right, RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // multipleAssignment ::= variableList ASSIGN expression 
            {
              Object RESULT = null;
		int vlleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Object vl = (Object)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).value;
		 RESULT = new ASTMulAssignExp( (ArrayList<String>)vl, e ); 
              CUP$SMPLParser$result = new java_cup.runtime.Symbol(25/*multipleAssignment*/, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right, RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // assignment ::= VARIABLE ASSIGN expression 
            {
              Object RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).value;
		 RESULT = new ASTAssignExp( v, e ); 
              CUP$SMPLParser$result = new java_cup.runtime.Symbol(15/*assignment*/, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right, RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // definition ::= DEF VARIABLE expression 
            {
              Object RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).value;
		 RESULT = new ASTDefine(v, e); 
              CUP$SMPLParser$result = new java_cup.runtime.Symbol(14/*definition*/, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right, RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // pairStatement ::= PAIR LPAREN expression COMMA expression RPAREN 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		ASTNode e1 = (ASTNode)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ASTNode e2 = (ASTNode)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new ASTPairExp( e1, e2 ); 
              CUP$SMPLParser$result = new java_cup.runtime.Symbol(36/*pairStatement*/, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right, RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // readIntStatement ::= READINT LPAREN empty RPAREN 
            {
              Object RESULT = null;
		 RESULT = new ASTReadIntExp(); 
              CUP$SMPLParser$result = new java_cup.runtime.Symbol(35/*readIntStatement*/, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right, RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // readStatement ::= READ LPAREN empty RPAREN 
            {
              Object RESULT = null;
		 RESULT = new ASTReadExp(); 
              CUP$SMPLParser$result = new java_cup.runtime.Symbol(34/*readStatement*/, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right, RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // printlnStatement ::= PRINTLN LPAREN expression RPAREN 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new ASTPrintExp( e, true ); 
              CUP$SMPLParser$result = new java_cup.runtime.Symbol(33/*printlnStatement*/, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right, RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // printStatement ::= PRINT LPAREN expression RPAREN 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new ASTPrintExp( e, false ); 
              CUP$SMPLParser$result = new java_cup.runtime.Symbol(32/*printStatement*/, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right, RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ifStatement ::= IF expression THEN expression ELSE expression 
            {
              Object RESULT = null;
		int condleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).right;
		ASTNode cond = (ASTNode)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ASTNode exp = (ASTNode)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int elseExpleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).left;
		int elseExpright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right;
		ASTNode elseExp = (ASTNode)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).value;
		 RESULT = new ASTIfExp( cond, exp, elseExp ); 
              CUP$SMPLParser$result = new java_cup.runtime.Symbol(16/*ifStatement*/, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right, RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ifStatement ::= IF expression THEN expression 
            {
              Object RESULT = null;
		int condleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ASTNode cond = (ASTNode)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right;
		ASTNode exp = (ASTNode)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).value;
		 RESULT = new ASTIfExp( cond, exp, null ); 
              CUP$SMPLParser$result = new java_cup.runtime.Symbol(16/*ifStatement*/, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right, RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // vectorExpList ::= vecExpression 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).value;
		 
                                        ArrayList<ASTNode> lst = new ArrayList<ASTNode>();
                                        lst.add( (ASTNode)e );
                                        RESULT = lst;
                                   
              CUP$SMPLParser$result = new java_cup.runtime.Symbol(22/*vectorExpList*/, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right, RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // vectorExpList ::= vectorExpList COMMA vecExpression 
            {
              Object RESULT = null;
		int velleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int velright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Object vel = (Object)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).value;
		 RESULT = vel; ((ArrayList<ASTNode>)vel).add((ASTNode)e); 
              CUP$SMPLParser$result = new java_cup.runtime.Symbol(22/*vectorExpList*/, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right, RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // vecExpression ::= expression COLON expression 
            {
              ASTNode RESULT = null;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ASTNode size = (ASTNode)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int funcleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right;
		ASTNode func = (ASTNode)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).value;
		 RESULT = new ASTVecExp( size, func ); 
              CUP$SMPLParser$result = new java_cup.runtime.Symbol(13/*vecExpression*/, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right, RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // vecExpression ::= expression 
            {
              ASTNode RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).value;
		 RESULT = e; 
              CUP$SMPLParser$result = new java_cup.runtime.Symbol(13/*vecExpression*/, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right, RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expressionList2 ::= expression 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).value;
		 
                                        ArrayList<ASTNode> lst = new ArrayList<ASTNode>();
                                        lst.add( (ASTNode)e );
                                        RESULT = lst;
                                   
              CUP$SMPLParser$result = new java_cup.runtime.Symbol(21/*expressionList2*/, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right, RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expressionList2 ::= expressionList2 COMMA expression 
            {
              Object RESULT = null;
		int elleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).value;
		 RESULT = el; ((ArrayList<ASTNode>)el).add(e); 
              CUP$SMPLParser$result = new java_cup.runtime.Symbol(21/*expressionList2*/, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right, RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expressionList ::= empty 
            {
              Object RESULT = null;
		 RESULT = new ArrayList<ASTNode>(); 
              CUP$SMPLParser$result = new java_cup.runtime.Symbol(20/*expressionList*/, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right, RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expressionList ::= expressionList2 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).value;
		 RESULT = e; 
              CUP$SMPLParser$result = new java_cup.runtime.Symbol(20/*expressionList*/, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right, RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // functionCall ::= LPAREN expression RPAREN LPAREN expressionList RPAREN 
            {
              ASTNode RESULT = null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).right;
		ASTNode func = (ASTNode)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Object param = (Object)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new ASTFunCallExp( func, (ArrayList<ASTNode>)param ); 
              CUP$SMPLParser$result = new java_cup.runtime.Symbol(17/*functionCall*/, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right, RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // functionCall ::= CALL LPAREN expression COMMA expression RPAREN 
            {
              ASTNode RESULT = null;
		int funcExpleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int funcExpright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		ASTNode funcExp = (ASTNode)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ASTNode param = (ASTNode)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new ASTFunCallExp( funcExp, param ); 
              CUP$SMPLParser$result = new java_cup.runtime.Symbol(17/*functionCall*/, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right, RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // param ::= VARIABLE 
            {
              String RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).value;
		 RESULT = v; 
              CUP$SMPLParser$result = new java_cup.runtime.Symbol(30/*param*/, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right, RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // paramList ::= empty 
            {
              Object RESULT = null;
		 RESULT = new ArrayList<String>(); 
              CUP$SMPLParser$result = new java_cup.runtime.Symbol(29/*paramList*/, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right, RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // paramList ::= param 
            {
              Object RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).value;
		 
                            ArrayList<String> lst = new ArrayList<String>();
                            lst.add( p );
                            RESULT = lst;
                      
              CUP$SMPLParser$result = new java_cup.runtime.Symbol(29/*paramList*/, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right, RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // paramList ::= paramList COMMA param 
            {
              Object RESULT = null;
		int plleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Object pl = (Object)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).value;
		 ((ArrayList<String>)pl).add(p); RESULT = pl; 
              CUP$SMPLParser$result = new java_cup.runtime.Symbol(29/*paramList*/, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right, RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // functionDef ::= PROC LPAREN paramList RPAREN stmtList 
            {
              ASTNode RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right;
		ASTSequence s = (ASTSequence)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).value;
		 RESULT = new ASTFunDefExp( "function", (ArrayList<String>)p, s ); 
              CUP$SMPLParser$result = new java_cup.runtime.Symbol(19/*functionDef*/, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right, RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // factor ::= LPAREN expression RPAREN 
            {
              ASTNode RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = e; 
              CUP$SMPLParser$result = new java_cup.runtime.Symbol(6/*factor*/, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right, RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // factor ::= LET LPAREN bindingList RPAREN expression SEMI 
            {
              ASTNode RESULT = null;
		int blleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int blright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		Object bl = (Object)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new ASTFunDefExp( (ArrayList<ASTNode>)bl, e ); 
              CUP$SMPLParser$result = new java_cup.runtime.Symbol(6/*factor*/, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right, RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // factor ::= LAZY LPAREN expression RPAREN 
            {
              ASTNode RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new ASTLazyExp(e); 
              CUP$SMPLParser$result = new java_cup.runtime.Symbol(6/*factor*/, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right, RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // factor ::= printlnStatement 
            {
              ASTNode RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).value;
		 RESULT = (ASTNode)p; 
              CUP$SMPLParser$result = new java_cup.runtime.Symbol(6/*factor*/, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right, RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // factor ::= printStatement 
            {
              ASTNode RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).value;
		 RESULT = (ASTNode)p; 
              CUP$SMPLParser$result = new java_cup.runtime.Symbol(6/*factor*/, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right, RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // factor ::= VECLEFT vectorExpList VECRIGHT 
            {
              ASTNode RESULT = null;
		int velleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int velright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Object vel = (Object)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new ASTVectorListExp( (ArrayList<ASTNode>)vel ); 
              CUP$SMPLParser$result = new java_cup.runtime.Symbol(6/*factor*/, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right, RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // factor ::= SUBSTR LPAREN expression COMMA expression COMMA expression RPAREN 
            {
              ASTNode RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).right;
		ASTNode e1 = (ASTNode)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		ASTNode e2 = (ASTNode)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ASTNode e3 = (ASTNode)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new ASTSubstrExp(e1, e2, e3); 
              CUP$SMPLParser$result = new java_cup.runtime.Symbol(6/*factor*/, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right, RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // factor ::= EQUALQ LPAREN expression COMMA expression RPAREN 
            {
              ASTNode RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		ASTNode e1 = (ASTNode)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ASTNode e2 = (ASTNode)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new ASTEqualExp(e1, e2); 
              CUP$SMPLParser$result = new java_cup.runtime.Symbol(6/*factor*/, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right, RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // factor ::= EQVQ LPAREN expression COMMA expression RPAREN 
            {
              ASTNode RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).right;
		ASTNode e1 = (ASTNode)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ASTNode e2 = (ASTNode)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new ASTEqvExp(e1, e2); 
              CUP$SMPLParser$result = new java_cup.runtime.Symbol(6/*factor*/, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right, RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // factor ::= LBRACKET expressionList2 RBRACKET 
            {
              ASTNode RESULT = null;
		int elistleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int elistright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Object elist = (Object)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new ASTListExp((ArrayList<ASTNode>)elist); 
              CUP$SMPLParser$result = new java_cup.runtime.Symbol(6/*factor*/, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right, RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // factor ::= SIZE LPAREN expression RPAREN 
            {
              ASTNode RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new ASTSizeExp(e); 
              CUP$SMPLParser$result = new java_cup.runtime.Symbol(6/*factor*/, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right, RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // factor ::= LIST LPAREN expressionList RPAREN 
            {
              ASTNode RESULT = null;
		int elistleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int elistright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Object elist = (Object)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new ASTListExp((ArrayList<ASTNode>)elist); 
              CUP$SMPLParser$result = new java_cup.runtime.Symbol(6/*factor*/, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right, RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // factor ::= PAIRQ LPAREN expression RPAREN 
            {
              ASTNode RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new ASTPairQExp(e); 
              CUP$SMPLParser$result = new java_cup.runtime.Symbol(6/*factor*/, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right, RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // factor ::= CDR LPAREN expression RPAREN 
            {
              ASTNode RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new ASTCdrExp(e); 
              CUP$SMPLParser$result = new java_cup.runtime.Symbol(6/*factor*/, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right, RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // factor ::= CAR LPAREN expression RPAREN 
            {
              ASTNode RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = new ASTCarExp(e); 
              CUP$SMPLParser$result = new java_cup.runtime.Symbol(6/*factor*/, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right, RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // factor ::= pairStatement 
            {
              ASTNode RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).value;
		 RESULT = (ASTNode)p; 
              CUP$SMPLParser$result = new java_cup.runtime.Symbol(6/*factor*/, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right, RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // factor ::= readIntStatement 
            {
              ASTNode RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).value;
		 RESULT = (ASTNode)r; 
              CUP$SMPLParser$result = new java_cup.runtime.Symbol(6/*factor*/, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right, RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // factor ::= readStatement 
            {
              ASTNode RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).value;
		 RESULT = (ASTNode)r; 
              CUP$SMPLParser$result = new java_cup.runtime.Symbol(6/*factor*/, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right, RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // factor ::= functionCall 
            {
              ASTNode RESULT = null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right;
		ASTNode fc = (ASTNode)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).value;
		 RESULT = fc; 
              CUP$SMPLParser$result = new java_cup.runtime.Symbol(6/*factor*/, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right, RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // factor ::= functionDef 
            {
              ASTNode RESULT = null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right;
		ASTNode fd = (ASTNode)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).value;
		 RESULT = fd; 
              CUP$SMPLParser$result = new java_cup.runtime.Symbol(6/*factor*/, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right, RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // factor ::= ifStatement SEMI 
            {
              ASTNode RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = (ASTNode)i; 
              CUP$SMPLParser$result = new java_cup.runtime.Symbol(6/*factor*/, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right, RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // factor ::= FALSE 
            {
              ASTNode RESULT = null;
		 RESULT = new ASTBooleanExp( false ); 
              CUP$SMPLParser$result = new java_cup.runtime.Symbol(6/*factor*/, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right, RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // factor ::= TRUE 
            {
              ASTNode RESULT = null;
		 RESULT = new ASTBooleanExp( true ); 
              CUP$SMPLParser$result = new java_cup.runtime.Symbol(6/*factor*/, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right, RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // factor ::= INT 
            {
              ASTNode RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).value;
		 RESULT = new ASTIntExp( i ); 
              CUP$SMPLParser$result = new java_cup.runtime.Symbol(6/*factor*/, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right, RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // factor ::= BIN 
            {
              ASTNode RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).value;
		 RESULT = new ASTIntExp( b ); 
              CUP$SMPLParser$result = new java_cup.runtime.Symbol(6/*factor*/, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right, RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // factor ::= HEX 
            {
              ASTNode RESULT = null;
		int hleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right;
		Integer h = (Integer)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).value;
		 RESULT = new ASTIntExp( h ); 
              CUP$SMPLParser$result = new java_cup.runtime.Symbol(6/*factor*/, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right, RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // factor ::= CHAR 
            {
              ASTNode RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).value;
		 RESULT = new ASTStringExp( c ); 
              CUP$SMPLParser$result = new java_cup.runtime.Symbol(6/*factor*/, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right, RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // factor ::= STRING 
            {
              ASTNode RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).value;
		 RESULT = new ASTStringExp( s ); 
              CUP$SMPLParser$result = new java_cup.runtime.Symbol(6/*factor*/, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right, RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // factor ::= DOUBLE 
            {
              ASTNode RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right;
		Float d = (Float)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).value;
		 RESULT = new ASTFloatExp( d.floatValue() ); 
              CUP$SMPLParser$result = new java_cup.runtime.Symbol(6/*factor*/, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right, RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // factor ::= VARIABLE 
            {
              ASTNode RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).value;
		 RESULT = new ASTIdExp( v ); 
              CUP$SMPLParser$result = new java_cup.runtime.Symbol(6/*factor*/, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right, RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // factor2 ::= factor 
            {
              ASTNode RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right;
		ASTNode f = (ASTNode)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).value;
		 RESULT = f; 
              CUP$SMPLParser$result = new java_cup.runtime.Symbol(9/*factor2*/, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right, RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // factor2 ::= BNOT factor2 
            {
              ASTNode RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right;
		ASTNode f = (ASTNode)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).value;
		 RESULT = new ASTBoNotExp( f ); 
              CUP$SMPLParser$result = new java_cup.runtime.Symbol(9/*factor2*/, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right, RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // term ::= factor2 
            {
              ASTNode RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right;
		ASTNode f = (ASTNode)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).value;
		 RESULT = f; 
              CUP$SMPLParser$result = new java_cup.runtime.Symbol(5/*term*/, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right, RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // term ::= term MOD factor2 
            {
              ASTNode RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right;
		ASTNode f = (ASTNode)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).value;
		 RESULT = new ASTNmModExp(t, f); 
              CUP$SMPLParser$result = new java_cup.runtime.Symbol(5/*term*/, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right, RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // term ::= term DIV factor2 
            {
              ASTNode RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right;
		ASTNode f = (ASTNode)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).value;
		 RESULT = new ASTNmDivExp(t, f); 
              CUP$SMPLParser$result = new java_cup.runtime.Symbol(5/*term*/, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right, RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // term ::= term MUL factor2 
            {
              ASTNode RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right;
		ASTNode f = (ASTNode)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).value;
		 RESULT = new ASTNmMulExp(t, f); 
              CUP$SMPLParser$result = new java_cup.runtime.Symbol(5/*term*/, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right, RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // term5 ::= term 
            {
              ASTNode RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).value;
		 RESULT = t; 
              CUP$SMPLParser$result = new java_cup.runtime.Symbol(12/*term5*/, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right, RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // term5 ::= term5 CONCAT term 
            {
              ASTNode RESULT = null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ASTNode t1 = (ASTNode)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right;
		ASTNode t2 = (ASTNode)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).value;
		 RESULT = new ASTListConcatExp(t1, t2); 
              CUP$SMPLParser$result = new java_cup.runtime.Symbol(12/*term5*/, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right, RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // term5 ::= term5 MINUS term 
            {
              ASTNode RESULT = null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ASTNode t1 = (ASTNode)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right;
		ASTNode t2 = (ASTNode)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).value;
		 RESULT = new ASTNmSubExp(t1, t2); 
              CUP$SMPLParser$result = new java_cup.runtime.Symbol(12/*term5*/, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right, RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // term5 ::= term5 PLUS term 
            {
              ASTNode RESULT = null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ASTNode t1 = (ASTNode)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right;
		ASTNode t2 = (ASTNode)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).value;
		 RESULT = new ASTNmAddExp(t1, t2); 
              CUP$SMPLParser$result = new java_cup.runtime.Symbol(12/*term5*/, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right, RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // term4 ::= term5 
            {
              ASTNode RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).value;
		 RESULT = t; 
              CUP$SMPLParser$result = new java_cup.runtime.Symbol(11/*term4*/, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right, RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // term4 ::= term4 BOR term5 
            {
              ASTNode RESULT = null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ASTNode t1 = (ASTNode)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right;
		ASTNode t2 = (ASTNode)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).value;
		 RESULT = new ASTBitOrExp(t1, t2); 
              CUP$SMPLParser$result = new java_cup.runtime.Symbol(11/*term4*/, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right, RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // term4 ::= term4 BAND term5 
            {
              ASTNode RESULT = null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ASTNode t1 = (ASTNode)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right;
		ASTNode t2 = (ASTNode)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).value;
		 RESULT = new ASTBitAndExp(t1, t2); 
              CUP$SMPLParser$result = new java_cup.runtime.Symbol(11/*term4*/, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right, RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // term3 ::= term4 
            {
              ASTNode RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).value;
		 RESULT = t; 
              CUP$SMPLParser$result = new java_cup.runtime.Symbol(10/*term3*/, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right, RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // term3 ::= term3 EQUAL term4 
            {
              ASTNode RESULT = null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ASTNode t1 = (ASTNode)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right;
		ASTNode t2 = (ASTNode)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).value;
		 RESULT = new ASTNmEqlExp(t1, t2); 
              CUP$SMPLParser$result = new java_cup.runtime.Symbol(10/*term3*/, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right, RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // term3 ::= term3 LTHAN term4 
            {
              ASTNode RESULT = null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ASTNode t1 = (ASTNode)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right;
		ASTNode t2 = (ASTNode)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).value;
		 RESULT = new ASTNmLessExp(t1, t2); 
              CUP$SMPLParser$result = new java_cup.runtime.Symbol(10/*term3*/, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right, RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // term3 ::= term3 GTHAN term4 
            {
              ASTNode RESULT = null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ASTNode t1 = (ASTNode)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right;
		ASTNode t2 = (ASTNode)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).value;
		 RESULT = new ASTNmGrtrExp(t1, t2); 
              CUP$SMPLParser$result = new java_cup.runtime.Symbol(10/*term3*/, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right, RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // term3 ::= term3 LEQUAL term4 
            {
              ASTNode RESULT = null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ASTNode t1 = (ASTNode)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right;
		ASTNode t2 = (ASTNode)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).value;
		 RESULT = new ASTNmLEqlExp(t1, t2); 
              CUP$SMPLParser$result = new java_cup.runtime.Symbol(10/*term3*/, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right, RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // term3 ::= term3 GEQUAL term4 
            {
              ASTNode RESULT = null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ASTNode t1 = (ASTNode)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right;
		ASTNode t2 = (ASTNode)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).value;
		 RESULT = new ASTNmGEqlExp(t1, t2); 
              CUP$SMPLParser$result = new java_cup.runtime.Symbol(10/*term3*/, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right, RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // term3 ::= term3 NEQUAL term4 
            {
              ASTNode RESULT = null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ASTNode t1 = (ASTNode)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right;
		ASTNode t2 = (ASTNode)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).value;
		 RESULT = new ASTNmNotEqlExp(t1, t2); 
              CUP$SMPLParser$result = new java_cup.runtime.Symbol(10/*term3*/, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right, RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // term2 ::= term3 
            {
              ASTNode RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).value;
		 RESULT = t; 
              CUP$SMPLParser$result = new java_cup.runtime.Symbol(8/*term2*/, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right, RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // term2 ::= LNOT term3 
            {
              ASTNode RESULT = null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right;
		ASTNode t1 = (ASTNode)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).value;
		 RESULT = new ASTBoNotExp(t1); 
              CUP$SMPLParser$result = new java_cup.runtime.Symbol(8/*term2*/, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right, RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // term1 ::= term2 
            {
              ASTNode RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).value;
		 RESULT = t; 
              CUP$SMPLParser$result = new java_cup.runtime.Symbol(7/*term1*/, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right, RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // term1 ::= term1 LAND term2 
            {
              ASTNode RESULT = null;
		int t1left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ASTNode t1 = (ASTNode)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right;
		ASTNode t2 = (ASTNode)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).value;
		 RESULT = new ASTBoAndExp(t1, t2); 
              CUP$SMPLParser$result = new java_cup.runtime.Symbol(7/*term1*/, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right, RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expression ::= term1 
            {
              ASTNode RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).value;
		 RESULT = t; 
              CUP$SMPLParser$result = new java_cup.runtime.Symbol(4/*expression*/, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right, RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expression ::= LBRACE stmtList RBRACE 
            {
              ASTNode RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ASTSequence e = (ASTSequence)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = e; 
              CUP$SMPLParser$result = new java_cup.runtime.Symbol(4/*expression*/, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right, RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expression ::= expression LOR term1 
            {
              ASTNode RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).value;
		 RESULT = new ASTBoOrExp( e, t ); 
              CUP$SMPLParser$result = new java_cup.runtime.Symbol(4/*expression*/, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right, RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // stmt ::= caseStmt 
            {
              ASTNode RESULT = null;
		int csleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right;
		Object cs = (Object)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).value;
		 RESULT = (ASTNode)cs; 
              CUP$SMPLParser$result = new java_cup.runtime.Symbol(2/*stmt*/, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right, RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stmt ::= multipleAssignment SEMI 
            {
              ASTNode RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = (ASTNode)m; 
              CUP$SMPLParser$result = new java_cup.runtime.Symbol(2/*stmt*/, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right, RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // stmt ::= assignment SEMI 
            {
              ASTNode RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = (ASTNode)a; 
              CUP$SMPLParser$result = new java_cup.runtime.Symbol(2/*stmt*/, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right, RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stmt ::= definition SEMI 
            {
              ASTNode RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = (ASTNode)d; 
              CUP$SMPLParser$result = new java_cup.runtime.Symbol(2/*stmt*/, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right, RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // stmt ::= expression SEMI 
            {
              ASTNode RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		 RESULT = e; 
              CUP$SMPLParser$result = new java_cup.runtime.Symbol(2/*stmt*/, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right, RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // stmtList ::= stmt 
            {
              ASTSequence RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right;
		ASTNode s = (ASTNode)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).value;
		 RESULT = new ASTSequence(s); 
              CUP$SMPLParser$result = new java_cup.runtime.Symbol(3/*stmtList*/, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right, RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // stmtList ::= stmtList stmt 
            {
              ASTSequence RESULT = null;
		int seqleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int seqright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		ASTSequence seq = (ASTSequence)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right;
		ASTNode s = (ASTNode)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).value;
		 RESULT = seq.add(s); 
              CUP$SMPLParser$result = new java_cup.runtime.Symbol(3/*stmtList*/, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right, RESULT);
            }
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).right;
		SMPLProgram start_val = (SMPLProgram)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).value;
		RESULT = start_val;
              CUP$SMPLParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$SMPLParser$parser.done_parsing();
          return CUP$SMPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= stmtList 
            {
              SMPLProgram RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right;
		ASTSequence s = (ASTSequence)((java_cup.runtime.Symbol) CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).value;
		 RESULT = new SMPLProgram(s); 
              CUP$SMPLParser$result = new java_cup.runtime.Symbol(1/*program*/, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SMPLParser$stack.elementAt(CUP$SMPLParser$top-0)).right, RESULT);
            }
          return CUP$SMPLParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

